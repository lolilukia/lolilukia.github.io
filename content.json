[{"title":"LeetCode 中等题 1-100 思路概述","date":"2020-03-09T15:48:51.000Z","path":"2020/03/09/LeetCode-中等题-1-100-思路概述/","text":"No.29 两数相除 本人思路：每次将除数乘以 2，记录乘的次数 k，直到被除数小于除数，则被除数至少是除数的 pow(2, k - 1)倍，记为 n。然后将被除数减去除数的一半（因为目前除数大于被除数），除数恢复到初始值，重新对 k 计数，最终直到被除数始终小于除数为止，累计每轮的 n 值，则为结果。 No.39 组合总和备选数组中没有重复数字，每个数字在一个组合中可以选择任意次数 本人思路：使用递归算法，出口条件是 target &lt;= 0，当 target = 0 时，将结果加入结果集。为了避免重复的结果，先将备选数组排序，然后每次只选不比目前结果最后一个元素小的元素。调用递归方法后，从结果中删去最后一个元素，以便重新选择其他数字进行下一步递归。 No.40 组合总和 II备选数组中可能包含重复数字，每个数字在每个组合中只能选择一次 本人思路：与 39 题类似，只不过需要避免同一个数字的重复选取和具有相同值的数字造成的重复组合，因此需要定义一个 visit 数组。选择前先判断是否已经访问过，仅选择未被访问过的数字，选择时 visit[i] 设置为 True，最后有可能会由于值相同的不同数字而出现重复的组合，在加入结果集中需要判断一下是否已包含此组合。 No.46 全排列给定数组中不包含重复数字 本人思路：与组合不同，出口条件是结果的个数与给定数组的元素个数相同，因此要将选取次数作为参数传递进递归方法中。由于排列不能重复选取，因此需要定义 visit 数组。 No.47 全排列 II给定数组中包含重复数字 本人思路：与不包含相同数字的全排列相比，包含重复数字时，需要在加入结果集之前，判断结果集中是否包含该结果。 No.48 旋转图像给定数组中包含重复数字 本人思路：将矩阵转置，即互换行列索引相反的元素，注意只交换一次，然后按行逆置即可。 No.49 字母异位词分组 本人思路：我的思路比较奇葩…首先将每个字符串排序，然后按排好序的字符串分出若干类，选取相同的字符串为一类，虽然通过，但时间复杂度挺高的。 No.54 螺旋矩阵 本人思路：顺时针螺旋的顺序就是按右下左上，那么就设置 4 个边界的变量 row_i, row_j, column_i 和 column_j，不断按右下左上的顺序进行输出，相应地，每次操作后分别对以上四个变量进行修改，直到 row_i &gt; row_j 或者 column_i &gt; column_j 终止循环。 No.55 跳跃游戏数组中的每个元素代表你在该位置可以跳跃的最大长度，判断能否到达最后一个位置。 本人思路：该题转化为求解最远能达到的位置，如果达到的最远位置大于等于最后一个位置的索引，那么肯定可以达到最后一个位置。但如果遍历时，发现之前点的最远到达位置小于当前点的索引，说明通过之前点无法到达当前点，可以直接返回否。最后判断最远位置是否大于等于最后一个位置的索引。 No.56 合并区间 本人思路：先对数组进行排序，排序的依据是按第一个元素的大小，对每一个当前区间 current，判断后续区间是否有交叉部分，如果后续区间的开始位置小于等于 current 的终止位置，则他们可以进行合并，合并生成的区间为 [current[0], max(current[1], other[1])]，将这个元素 insert 到数组中，然后从数组中删去这两个元素，如果产生合并，current 为合并后的元素，否则为数组中的下一个元素。由于是原地操作，直接返回数组即可。 No.59 螺旋矩阵 II 本人思路：与 I 类似，设置四个边界变量，然后按右下左上的顺序向初始二维矩阵中填数，直到数字等于 n 平方为止。 No.60 第 k 个排列 本人思路：看到这个题目，就知道应该不能把排列都算出来再输出，而是通过索引来从数组中选数。我们观察到，第一个数字固定后，有 (n - 1)! 种排列，那么我们用索引 k 除以 (n - 1)! 就能得知第一个应该选哪个数字，第二个固定，则有 (n - 2)! 种排列，以此类推。而选过的数字不能再选，因此每选完一个数字，就从数组中删去，最终拼接起来就为第 k 个排列。 No.61 旋转链表 本人思路：首先通过遍历统计一下链表的长度，然后将首尾相连，组成循环链表。从头部开始向后 length - k % length 个位置即为新的头部，然后再向后 length - 1 个位置，将最后一个元素的 next 设置为 None 即可。 No.62 不同路径 本人思路：记忆化搜索的经典题目，为 m n 的格点设定一个 m n 的矩阵 init，存放到达该点的路径条数，init[0][0] 为 1 （代表由起点到起点的路径只有一条）。如果是第一行，则只能由左边移动得到，init[i][j] = init[i][j - 1]，同理如果为第一列，只能由上边移动得到，init[i][j] = init[i - 1][j]，除了这两种情况以外，到达该点的路径等于到上边点和左边点的路径总和，init[i][j] = init[i - 1][j] + init[i][j - 1]，最终返回 init[n - 1][m - 1]。 No.63 不同路径 II 本人思路：基本沿用第 62 题的思路，但是要判断当前点上方和左方的格子是否是障碍物，如果上方的格子是障碍物，则当前点的路径条数等于到达左方格子的路径条数，左方格子同理，如果左方上方都是障碍物，则到达当前点的路径数为 0。另外，需要注意起始点和终点为障碍物的情况，那样路径条数都为 0。 No.64 最小路径和 本人思路：用数组 minSum 存储到该点的最小路径和，minSum 的初始值为该点的值，遍历至该点时，minSum 调整为该点值加上上方邻居和左方邻居的最小 minSum 值，若不存在上方邻居，则为该点值加上左方邻居 minSum 值，不存在左方邻居同理。最终返回最后一个点的 minSum 值。 No.71 简化路径 本人思路：本人处理方式比较复杂，首先循环将 ‘//‘ 替换成 ‘/‘，直到路径中不存在 ‘//‘。然后将按 ‘/‘ 分割的内容提取成一个数组，此时新建一个空字符串 res，将满足要求的内容向内填充。遍历该数组，假设是除了 ‘.’ 和 ‘..’ 的字符，添加到 res 后面，注意使用一个数组 index 保存普通字符的索引，假设是 ‘.’，不处理；假设是 ‘..’，截取字符串，将 index 最后一个索引代表的字符从 res 中删去，并且将这个索引从 index 中删去。注意，如果最终 res 仍是空字符串，则应该返回 ‘/’。 No.73 矩阵置零 本人思路：好像用了个比较愚蠢的做法，首先，遍历矩阵，将值为 0 的元素所在行和列的索引分别记录，然后再按行按列依次置零。 No.74 搜索二维矩阵 本人思路：先通过与每行最后一个元素比较确定元素所在行，然后在此行进行二分搜索。","comments":true,"tags":[{"name":"算法","slug":"算法","permalink":"http://lolilukia.com/tags/算法/"}]},{"title":"实时关注豆瓣租房信息，几行代码帮你轻松搞定","date":"2020-02-23T04:31:02.000Z","path":"2020/02/23/实时关注豆瓣租房信息，几行代码帮你轻松搞定/","text":"现代年轻人的日常生活已经离不开互联网，无论是订机票，点外卖还是网购，本质上，我们都已经习惯从互联网获取信息，并从中筛选、鉴别，然后作出下一步决策。 但有时，如何从浩瀚的信息之海找到我们所需要的东西，则是一个大问题。这时，技术就派上了用场。 设想这样一种场景，你租住的房子很快就要到期，可是却诸事缠身，没办法花费诸多精力寻找合适的房源。你第一时间想到了房屋中介，但又投鼠忌器，害怕自己的个人信息被人不经意间「分享」，你还希望直接和一房东对话，找一套直租房源。 你想到了论坛，看到了密密麻麻的帖子，并从中仔细挑选符合你期望的房源。结果你发现，看了半天，满意的似乎并不多，只能再刷刷看有没有新发布的帖子。 生活中诸如此类的情景还有很多，其实，在精力有限的情况下，可以让你的电脑代替你去论坛搜索你期望的信息，收集打包并呈现在你的眼前。 下面以租房和寻找二手物品为例，介绍我是如何用简单的方法筛选出相关信息并进行定时更新的。 豆瓣小组获取租房信息豆瓣上有很多专门的租房小组，尽管这些年也逐渐「沦陷」为房屋中介的战场，但由于历史悠久，我们还是能从中筛选出合适房源。 接下来的尝试，我们以「上海租房」小组为例，从该主页可以看到，相同类型的小组不少，当然也适用于这个方法。 正所谓知己知彼，百战不殆，在抓取该页面信息之前，我们先来看看页面结构是怎样的。 点击豆瓣页面中的「更多小组讨论」后，会发现标题涵盖了我们关心的地铁线路、地铁站名以及周边位置等信息。因此，我们的目标就可以概括为定时获取包含某些关键字的帖子标题以及帖子链接，并且其中不包含重复的帖子。 「人生苦短，我用 Python」，我们的这个小工具就是基于 Python 3 实现的。而且方便的是，小组讨论不必登录就可以浏览，这就省去了模拟浏览器登录的麻烦。 安装 python首先，我们需要 安装 Python ，详细方法可见这篇教程。建议使用 3.x 版本，毕竟今年 1 号起， 2.X版本官方都停止维护了。 Windows 下载安装包后，运行安装即可。 终端处输入 Python 显示版本信息则表示安装成功。 图为在 Windows cmd 中的效果。 虽然 Python 以短小精悍闻名，但我们还是想再精简下工作量，我们使用 Scrapy 框架来抓取网页上的信息，Scrapy 是 Python 的一个知名第三方爬虫库，Windows 平台可以直接通过安装Python后自带的 pip 安装，一行命令解决。 1pip install Scrapy 但 Mac OS 系统自带的 Python 2.7 会和 Scrapy 产生冲突，Mac OS 用户建议使用 virtualenv 在虚拟环境中进行安装。都安装完毕后，就可以创建项目了。 创建项目我们创建一个用以提取信息发送邮件的项目，将其命名为 ForumSpider。新建项目，首先 cd 到相应的目录，执行如下的命令： 1scrapy startproject ForumSpider 一个初始的 Scrapy 项目就生成了，下图是这个项目的目录结构，由于我们实现的功能比较简单，可以暂时不用关心其他文件，我们只需在 settings.py 中进行简单设置，然后在 spiders 目录下定义一个我们自己的爬取工具就够用了。 首先，我们需要在 settings.py 中设置 USER_AGENT，即用户代理， User Agent中文名为用户代理，简称 UA，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、CPU 类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等 简而言之，这就是客户机器的身份标识。我们需要设置此项以便能够隐藏机器的身份，不容易被网站拒绝。settings.py 中已经自带了一些配置并注释。按下 F12，选择 Network 标签页，随意点击一个链接，就可以从 Header 中获取 USER_AGENT： 将其替换 settings.py 中的 USER_AGENT： 1USER_AGENT = &apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&apos; 另外，我们选择遵循 Robots 规则， robots.txt是一种存放于网站根目录下的ASCII编码的文本文件，它通常告诉网络搜索引擎的漫游器（又称网络蜘蛛），此网站中的哪些内容是不应被搜索引擎的漫游器获取的，哪些是可以被漫游器获取的。 Robots.txt中定义了我们可以爬取的范围，符合对应该网站的爬取规范，以避免不必要的爬虫风险。然后，我们就可以新建一个工具定义我们的爬取规则。在此之前，我们需要从网站中找寻一定的规律来编写我们的脚本，我们打开刚才的「更多小组讨论」的帖子列表页面，观察 url 的规律，下图分别是第一页的 url 和第二页的 url，可以看出，分页参数 start 代表开始的元素编号，每页 25 个帖子： 了解了每次爬取的 url 的变化规律，接下来我们需要了解爬取内容的 DOM 树结构，进入控制台，选择 Elements 标签页，使用旁边的选择器定位标题所在的结构： 我们发现，整个列表是在一个名为 olt 的 class 中呈现的，标题所在的 class 名为 title，并且其中的超链接标签 中包含了我们需要的所有信息，标题和链接。由于页面中可能包含有多个名为 title 的 class，因此我们将其父级元素 olt 同时作为条件选择以便更方便地定位。 回到刚才的项目，我们此时需要新建一个名为 douban 的爬取工具： 1scrapy genspider douban &quot;douban.com&quot; douban.com 是我们设定的爬取域，生成的文件如图所示： start_urls 代表了爬取的 url，但实际上我们如果需要爬取多个页面的话， url 则是动态的。因此我们可以将 allowed_domains 和 start_urls 变量删去，用 start_requests 方法来动态生成爬取的 url： 1234def start_requests(self): for i in range(0, 5 * 25, 25): url = 'https://www.douban.com/group/549538/discussion?start=&#123;page&#125;'.format(page=i) yield scrapy.Request(url=url, callback=self.parse) 这个方法的功能就是循环爬取 start=0 到 start=100 的页面内容，每次共爬取 5 页，爬取时调用 parse 中指定的规则。在刚才我们探索页面结构的基础上，parse 方法定义为： 123def parse(self, response): for title in response.css('.olt .title'): yield &#123;'title': title.css('a::text').getall(), 'link': title.css('a::attr(href)').getall()&#125; 这个方法的含义是获取 olt 的子元素 title 下的 a 标签的文本和 href 属性，即内容和链接。getall 代表获取符合上述条件的所有元素的内容和链接。到这里，爬取的功能已经全部编写完毕了，一共是 7 行代码。但我们所需要的功能是在获取到新发布的帖子的信息时，收到推送或提醒。Scrapy 中内置了 mail 模块，可以很轻松地实现定时发送邮件的功能。那我们可以考虑先把爬取到的信息存储到文件中进行分析，再将由关键词筛选得到的信息与上一次筛选过后的信息进行比较，如果存在更新，就更新存储筛选信息的文件，并发送邮件。我们可以用以下的命令来将爬取到的信息输入到 JSON 文件中： 1scrapy crawl douban -o douban.json 既然需要定时执行，那我们就需要在根目录中创建一个 douban_main.py，用 time 库编写一个简单的定时器，用以爬取之前清空存储爬取信息的文件，并每 21600 秒（6 个小时）执行一次爬取分析： 1234567import time, oswhile True: if os.path.exists(\"douban.json\"): with open(\"douban.json\",'r+') as f: f.truncate() os.system(\"scrapy crawl douban -o douban.json\") time.sleep(21600) 最后一步，就是筛选信息并发送邮件了，发送邮件需要引用 MailSender 类： 1from scrapy.mail import MailSender 首先，我们要确保发送邮件的邮箱 SMTP 服务开启，并获取授权码，以 QQ 邮箱为例： 获取授权码之后，配置 MailSender 实例： 12345678mailer = MailSender( smtphost=\"smtp.qq.com\", mailfrom=\"xxxxxxxxx@qq.com\", smtpuser=\"xxxxxxxxx@qq.com\", smtppass=\"16 位授权码\", smtpssl=True, smtpport=465) 最后，我们需要指定一些关键词，为了便于理解，匹配的写法比较简易，注重性能的朋友们可以使用正则匹配。注意每次分析完毕之后，我们将迄今为止出现的符合关键词的信息写入到 douban_store.json 中，并在新信息出现时保持更新。这个过程写在爬虫程序结束之后调用的 close 方法中。附上 douban.py 的所有内容： 1234567891011121314151617181920212223242526272829303132333435363738394041424344# -*- coding: utf-8 -*-import scrapy, json, osfrom scrapy.mail import MailSenderclass DoubanSpider(scrapy.Spider): name = 'douban' def start_requests(self): for i in range(0, 5 * 25, 25): url = 'https://www.douban.com/group/549538/discussion?start=&#123;page&#125;'.format(page=i) yield scrapy.Request(url=url, callback=self.parse) def parse(self, response): for title in response.css('.olt .title'): yield &#123;'title': title.css('a::text').getall(), 'link': title.css('a::attr(href)').getall()&#125; def close(self): mailer = MailSender( smtphost=\"smtp.qq.com\", mailfrom=\"463584015@qq.com\", smtpuser=\"463584015@qq.com\", smtppass=\"afnzygrvbezsbgja\", smtpssl=True, smtpport=465 ) # 配置邮箱 obj_store, new_info = [], [] key_words = ['枫桥路', '曹杨路', '11 号线'] if os.path.exists(\"D:\\\\ForumSpider\\\\douban_store.json\"): with open(\"D:\\\\ForumSpider\\\\douban_store.json\", 'r') as f: obj_store = json.load(f) # 读取之前爬取的符合关键词的信息 with open(\"D:\\\\ForumSpider\\\\douban.json\", 'r') as load_f: load_dict = json.load(load_f) for info in load_dict: content = info[\"title\"][0].replace('\\n', '').replace('\\r', '').strip() #按标题进行筛选 for k in key_words: if k in content: tmp = &#123;\"title\": content, \"link\": info[\"link\"][0]&#125; if tmp not in obj_store: # 如果之前的爬取没有遇到过，则加入到新信息列表 new_info.append(tmp) obj_store.append(tmp) if len(new_info) &gt; 0: with open(\"D:\\\\ForumSpider\\\\douban_store.json\", 'w') as writer: json.dump(obj_store, writer) # 更新到旧信息列表 return mailer.send( # 发送邮件 to=['lolilukia@foxmail.com'], subject='【豆瓣脚本】上海租房', body='\\n'.join([str(x['title'] + ':' + x['link']) for x in new_info]) ) 运行 douban_main.py 即可定时运行这个信息爬取脚本： 1python douban_main.py 包含主函数，这个脚本一共 51 行，现在已经能满足使用需要，当然还可以进一步精简优化。执行脚本之后，很快我就收到了第一封邮件： 上述脚本适用于所有豆瓣小组，稍改改动优化过后也可以应用于获取留学信息、追星八卦等等方面。 场景 2：获取二手物品信息上述的场景适用于不需要登录就能查看信息的一些网站，然而大多数情况下，更多的信息需要登录之后才能查看。很多网站登录的时候使用了验证码，扫码等策略避免自动登录，cookie 的模拟登录方式又极容易过期，使用简单的策略爬取网站信息似乎有些困难，下面以 v2ex 论坛为例，介绍另一种爬取网页信息的半自动方法。 为何称为半自动方法呢，进入 v2ex 的登录页，我们发现登录框的下方需要输入验证码，如果我们需要模拟登录的话，可能还需要写一个模式识别的程序，甚至比我们浏览论坛的时间成本还高。如果能够人工输入一次验证码，然后让程序自动定时爬取，好像也可以接受。这样的话，我们可以采用模拟人工操作浏览器行为的框架 selenium。 selenium 依旧可以使用 pip 来进行安装： 1pip install selenium selenium 3 之后需要单独安装浏览器驱动，因此我们需要下载 geckodriver（ https://github.com/mozilla/geckodriver/releases） 和 chromedriver （ https://chromedriver.chromium.org/downloads ，其他浏览器需要安装对应的驱动），并将它们都加入到环境变量 PATH 中。 首先，我们先使用 selenium 调用浏览器，打开 v2ex 的登录页面： 1234from selenium import webdriversigin_url = 'https://www.v2ex.com/signin'driver = webdriver.Chrome('D:\\\\chrome_driver\\\\chromedriver.exe')driver.get(sigin_url) 以下是运行效果： 接下来，我们需要自动填充用户名和密码，然后等待我们人工输入验证码进入论坛。我们还是使用 CSS Selector 的方式定位元素，找到用户名和密码所在的输入框： 我们发现这两个输入框没有标识 id，也没有特别的 class 名称，因此我们可以使用 find_elements_by_css_selector 返回这一类元素的列表，幸运的是登录页一共只有 3 个输入框，因此我们可以通过索引迅速锁定它们，并填充我们的用户名密码。当然这里也可以用 tag 来定位： 1234user_name = driver.find_elements_by_css_selector('.cell .sl')[0]user_name.send_keys('v2ex 用户名')user_pwd = driver.find_elements_by_css_selector('.cell .sl')[1]user_pwd.send_keys('v2ex 密码') 运行效果如下： 验证码需要我们自行输入，为了让程序等待我们输入完毕验证码并点击登录按钮之后再进行爬取，我们设定一个 while 循环，当页面跳转到论坛列表页，出现特定元素时跳出： 1234while True: # 等待人工输入验证码 table = driver.find_elements_by_id('Tabs') if len(table) != 0: break 其余的逻辑与场景 1 大抵相仿，在此不多加赘述。模拟浏览器行为的写法比较简单，访问页面时调用形如 driver.get(url) 的方法即可，抓取的写法也很好理解，只是由于调用了浏览器，爬取速度会稍慢。不过这也无妨，我们要做的就是在点击登录按钮之后等待邮件即可。由于这个场景不再使用 Scrapy 进行抓取，发送邮件我们改用 Python 内置的 smtplib 和 email 模块，进行简单的配置（16 位授权码的获取方式参见场景 1）： 1234567import smtplibfrom email.mime.text import MIMETextfrom email.header import Headersender = 'xxxxxx@qq.com'subject = '【v2ex 脚本】二手交易'smtpserver = 'smtp.qq.com'passcode = '场景 1 出现过的 16 位授权码' 然后需要构造一个 MIMEText 实例，用以定义发送的内容、发件人、收件人和主题等等： 1234msg = MIMEText(body, 'html', 'utf8')msg['From'] = sendermsg['To'] = sendermsg['Subject'] = Header(subject, charset='utf8') 这里的 body 就是我们筛选出的新信息的字符串，发送邮件的过程也十分简单： 1234smtp = smtplib.SMTP()smtp.connect(smtpserver)smtp.login(sender, passcode)smtp.sendmail(sender, sender, msg.as_string()) 如果需要多次运行，则可以使用 JSON 文件记录筛选过的信息，如果仅运行一次，将 obj_store 放置在 while 循环外即可。注意尽量避免较短时间内多次进行登录操作，否则可能会被封 IP。另外，如果新增回复，链接会发生变化，因此此处只判断 title 是否出现过。附上 v2ex_main.py 的所有内容： 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950from selenium import webdriverimport time, os, jsonimport smtplibfrom email.mime.text import MIMETextfrom email.header import Headersender = 'xxxxxxxxx@qq.com'subject = '【v2ex 脚本】二手交易'smtpserver = 'smtp.qq.com'passcode = '16 位授权码'sigin_url = 'https://www.v2ex.com/signin'driver = webdriver.Chrome('D:\\\\chrome_driver\\\\chromedriver.exe')driver.get(sigin_url)user_name = driver.find_elements_by_css_selector('.cell .sl')[0]user_name.send_keys('v2ex 用户名')user_pwd = driver.find_elements_by_css_selector('.cell .sl')[1]user_pwd.send_keys('v2ex 密码')while True: # 等待人工输入验证码 table = driver.find_elements_by_id('Tabs') if len(table) != 0: breakkey_words = ['mbp', 'AirPods', '触摸板']obj_store = []while True: new_info = [] for i in range(0, 5): driver.get('https://www.v2ex.com/go/all4all?p=&#123;page&#125;'.format(page=i+1)) items = driver.find_elements_by_css_selector('.item_title a') for item in items: for k in key_words: if k in item.text: tmp = &#123;'title': item.text, 'link': item.get_attribute('href')&#125; if tmp['title'] not in obj_store: new_info.append(tmp) obj_store.append(tmp['title']) if len(new_info) &gt; 0: body = '\\n'.join([str(x['title'] + ':' + x['link']) for x in new_info]) msg = MIMEText(body, 'html', 'utf8') msg['From'] = sender msg['To'] = sender msg['Subject'] = Header(subject, charset='utf8') smtp = smtplib.SMTP() smtp.connect(smtpserver) smtp.login(sender, passcode) smtp.sendmail(sender, sender, msg.as_string()) smtp.close() time.sleep(1800) 爬取的过程如下图所示， 切记不要关闭浏览器，随后会收到一封来自脚本的邮件： 总结以上仅是相应于场景提出的小规模样例，生活中其实有相当多的应用，比如最近一段时间抢购口罩等等…这样的小工具能够一定程度上提高我们生活的效率，避免花费不必要的时间。 最后，虽然网页爬虫能够给我们的生活带来一定的便利，免去人工筛选信息的烦恼，但还是要注意道德与法律的边界，防止带来一系列负面影响。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"LeetCode 简单题 101-200 思路概述","date":"2020-02-19T12:09:42.000Z","path":"2020/02/19/LeetCode-简单题-101-200-思路概述/","text":"No.160 相交链表 本人思路：计算 A 链表和 B 链表的长度之差 x，在相对长的链表中向后移动 x 个元素，得到两个长度相等的链表，然后同时遍历 A 链表和 B 链表，找到相同的节点即为相交节点。 No.167 两数之和 II - 输入有序数组 本人思路：每次循环固定一个元素，target - current 计算出另一个目标元素值，然后向后遍历，在满足小于等于目标元素值的范围内搜索。并在每一轮搜索中记录上一个元素值，遇到相同值的元素直接 continue 跳过。 No.168 Excel表列名称 本人思路：根据规律可知，字符串的组成是由 n 除以 26 的商 + n 除以 26 的余数得到，其中若 n 除以 26 的商大于 26，设商为 x，则该项的字符串由 x 除以 26 的商 + x 除以 26 的余数组成，以此类推，直到商小于等于 26 为止。值得注意的是，此题余数为 0 时，要拆分成 商 - 1 和 26 （余数）的形式。 注：ord 可获取字符的 ascii 码，chr 可将 ascii 码转化成字符。 No.169 多数元素 本人思路：先对数组排序，对每个元素出现的次数计数，当次数大于数组长度的一半时，返回该元素。 No.171 Excel表列序号 本人思路： “CTH” = ((3 26) + 20) 26 + 8 遍历字符串 s，设中间及最终结果为 sum，当前索引为 i，字符代表的数字为ascii 码减去 64。如果是第一个字符，分两种情况，第一种，也是最后一个字符，sum 记录为 s[i] 代表的值，第二种情况 sum 记录为 26 乘以 s[i] 代表的值。如果不是第一个字符，也分为两种情况，如果是最后一个字符，sum 加上 s[i] 代表的值，不是最后一个字符，sum 记录为 26 乘以 sum 加上 s[i] 代表的值。 No.172 阶乘后的零 本人思路：尾数有多少个零，取决于阶乘由多少个 5 组成，因此需要找到 5 i &lt; n 的最大 i，然后将 1 到 i 的 n / (5 i) 累加，即能得到一共有多少个 5。 No.189 旋转数组 本人思路：每一次旋转，向列表的头部插入列表的最后一个元素，并将最后一个元素删除。 No.190 颠倒二进制位 本人思路：使用 ‘{:032b}’.format(n) 将整数转换成 32 位前补 0 的字符串，然后使用 [::-1] 进行逆置，最终使用 int(x, 2) 转换为二进制数。 No.191 位 1 的个数 本人思路：使用 ‘{:032b}’.format(n) 将整数转换成 32 位前补 0 的字符串，统计字符串中 ‘1’ 的个数。 No.198 打家劫舍 本人思路：动态规划的基本题目，当前房屋的最高金额的公式可以写为 res(n) = max(res(n - 2) + num[n], res(n - 1))，n 从 2 开始，res(0) = 0, res(1) = num[1]","comments":true,"tags":[{"name":"算法","slug":"算法","permalink":"http://lolilukia.com/tags/算法/"}]},{"title":"LeetCode 简单题 1-100 思路概述","date":"2020-02-19T10:37:46.000Z","path":"2020/02/19/LeetCode-简单题-1-100-思路概述/","text":"","comments":true,"tags":[{"name":"算法","slug":"算法","permalink":"http://lolilukia.com/tags/算法/"}]},{"title":"2019年度总结","date":"2020-02-02T08:47:55.000Z","path":"2020/02/02/2019年终总结/","text":"我总是盼望能在回顾往年年度总结的时候，能够有柳暗花明又一村的感觉。然而总是事与愿违，一年比一年更狼狈而不知所终。 我常常无端想起数年前，甚至十几年前的事。人说只有处境糟糕的人，才会一味地怀念过去，我无从辩驳。可能前二十年的人生过于丰富有趣，才会让我在突然陷入苍白之中手足无措。曾对世界任何事物都保有的热切向往，在这几年间骤然熄灭。 我开始感叹命运的选择，如果我未曾走出这一步，就无法相信这几年几乎毁了我的整个人生。我听着命运顺遂者谈论对生活的看法，没人会去了解被命运折磨至不堪之人的艰难历程，正如没人发现我听到这轻描淡写的片段竟然泪流满面。 我也终于确信我无力抵抗命运，联想起一直信奉的《霍乱时期的爱情》里的那句话，“趁年轻，尽力去尝遍所有的痛苦，那些不是任何时候都有机会的”，仿佛只剩下了讽刺。我无法承认自己的失败，也无法同自己和解，无法相信这几年我珍视的时间换来的只有折磨。 纵观 2019 的一整年，可以值得一提的收获只能说寥寥。快节奏的生活戛然而止，取而代之的是人生的空寂感。眼下的事毫无生机，就不由得想得更远。尽管常言道“人无百岁寿，常怀千岁忧”，但一想到现在花费数月数年投入习得的技能，不过是未来机器的常规配置，就感到虚妄与徒劳。 我也曾想到，沦落到如今的地步，究其根本是我本没有热爱或者说可称得上理想的事物。高考填报志愿之前，我以为我是热爱绘画的，所有的学校优先报考了建筑系，然而当我暑期去画室每日画一幅素描的时候，就发现我其实本无恒久的耐心。我以为我是热爱羽毛球的，那也只不过是每周一两次打球恰好可以满足我的新鲜感，当我混迹于真正的爱好者之间的时候，我才发现我技术上的瓶颈，才发现我厌倦得如此之快。我也以为我是热爱编程的，毕竟这几年都在做与此相关的事情，但实际上也不过是原地踏步而已。 因此，我发现在新鲜感和好奇心消散之前把事情做完，还可以勉强将生活维持下去，尽管无法顺应时代的要求。 说好年终总结是写一年之中的成就，写到现在有一些偏题。虽然可以总结的并不算很多，但一年之中总有些得失可以记下以供未来翻阅。 年中时我潜伏其中的标杆淘宝店成为了知乎热议话题，随后被淘宝封杀，连同我那还没有升级为钻石的淘宝店同样遭遇了降权。挽救的方法不是没有，而我诸事缠身无暇顾及，只得眼看着这个延续了 2 周年的副业就此告吹，了无痕迹。 和老嘟录制的播客更新到了第 24 期，最长的时候甚至有 3 个月都没有新节目出炉，但一直在断断续续坚持，联系到了本科时计算机协会的同学，成为播客出场大于 2 场的嘉宾。越是不顺利的时候，就越想做些其他的事情，仿佛在安慰自己，这几年也并不是毫无收获，至少留下了些痕迹。尽管实际上我们的更新频率并不固定，听众也仅有几百人，然而在苹果官网播客分类页面中，我们被选为科技类热门播客，也有一个电台在节目中提到过我们。 5 月又一次报名小程序开发大赛，虽然已是轻车熟路，但竞争者也更为强劲，连我平日常用的小程序的开发者也参与了比赛，最终还是以华东赛区三等奖的成绩收场。我只是很喜欢用几天的时间就获得一些成就的感觉，比起那些过程过于复杂的事物，我显然有些饮鸩止渴的快感。 今年 5 月是我第一次出国，是以旅游的目的。由于学校对私人缘由出国的管理比较严格，我们只得选择免签地区，以免去办理签证所需要的学校假条。纵观免签地区，只有济州岛和巴厘岛在我们认知范围之内。最终我们选择了济州岛，观光同时也可以兼顾买买买。出发日期选在 5 月一个平凡的工作日，往返的机票总额在 2000 元以内，可以说是一场非常经济的旅行。虽然只是一个偏僻的小岛，但发达国家的缩影仍可见一二：每隔 50m 就会有一家便利店，以 CU、gs25 和 711 为主；街上几乎没有垃圾桶，进行严格的垃圾分类；公交站有电子屏进行到站时刻提醒；汽车作为代步工具非常普遍，而且 95% 是现代和起亚等等。这里的鞋和化妆品打折力度很大，免税店里后和雪花秀的套盒甚至只有淘宝旗舰店价格的 6 折，因此也吸引了大量职业的代购，将免税店围得水泄不通。除了这些新奇之外，在人数最为密集的免税店门口，竟然有沉寂多年的 FL 功的摊位，并有人宣传演说，让我十分惊异。关于这个，其实有很多感触和想法，但暂且按下不表。韩国果然下至 18 上至 80 的女人都会化妆再出门，近看白到发光 360 度无死角的美女也是真实存在且随处可见。最后一点，韩国的饮食还是很符合我的期望，辣的拉面，汤汤水水，或是一些海鲜，都十足美味。 今年 7 月去匈牙利参加学术会议，借着这次机会也顺便去了奥地利，今年去的三个国家都有其明艳而独特的色彩，装点了平凡而又焦虑的一年。有次无意在坐地铁时，看到了地铁电子屏上宣传纽约咖啡馆，和我拍照所取的角度一样，装饰繁复华丽，店中穿着考究的服务生在走廊间穿梭，这张照片是老嘟帮我修的，他说和想象中的欧洲一样。而更让我觉得古典的场景则是一天上午起床，我们所住的老式公寓楼传出歌剧中相似的歌声，在三栋楼中环绕，那一刻我觉得沉浸极了。正如我以往看展的习惯，我在马加什教堂也留下了便签，我没有祈祷让我学业有成早日毕业之类的，我彼时认为那些都是人生中的小事，却不曾料到这些事日后给我带来了巨大的痛苦。我向来宁愿祈祷感情年年如今日，也不想许愿平步青云飞黄腾达。我只希望它真实而充盈，而不是空无一物却频繁曝光于世。我在参观美泉宫的时候，曾开玩笑说看过欧式的宫廷，可能故宫吸引我的就只有它的配色了，只得感叹语言过于苍白，而宫殿内部又不得拍照。我曾在高中时期沉溺于宫斗剧的剧情，剧中女子锦衣玉食却被终生囚禁，她们仍努力与命运抗争。而茜茜公主可以会晤客人商谈政事，可以锻炼身体，可以独自外出旅游，而她却始终鄙夷这种不存在爱情的关系，政治上的联姻的确是悲剧，但相较而言，更凸显中国古代女子的悲戚。途径维也纳金色大厅，却没能欣赏一场音乐会，我时刻提醒自己这样温和舒缓的情景只是幻象和虚无，旅程结束之后，我将面对的，还是生活严苛而令人窒息的面目。 这一年的经历乏善可陈，已与我数年前经历丰富人生的期盼背道而驰。我突然想起几年前去 M50 看展的情景，有一个红底白字的幕布深得我心，具体内容已不可考，大意是人总会走向自己的反面。从前我将信将疑，而如今我成为最典型的示例，我目前的心境与彼时正是全然相反。我可能很难回忆起那种入睡前迫不及待开启明天的感觉，近年来业已习惯沉重地闭上双眼。我对此时无从留恋，也对未来无所期待，不知是否无可避免走向这一结局，但我已无暇顾及。 2019 年的总结暂时写到这里，我不期待 2020， 却无法阻止它。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"2018年度总结","date":"2019-01-09T13:06:21.000Z","path":"2019/01/09/2018年度总结/","text":"快一年没有更新博客，2018转瞬即逝。距离上海那场罕见雪灾和北京奥运会竟然都过去了十年，迎接新年的仪式感也已消磨殆尽。匆忙告别了本命年，又要投身下一年的繁忙之中，此篇博客用以盘点18年的一些收获及心得。 18年似乎是不务正业的一年，拓展了很多新鲜的体验。然而总体上还是终究过上了曾经最怕的平淡无奇的生活，只不过是在这无趣中勉强寻求些新鲜感罢了。 独立开发了小程序嘉小羽，历时3天上线并于年中重构了第二版，第二版嘉小羽得了首届全国高校小程序大赛的华东赛区三等奖。本来没想能在逾5千支队伍的竞争中获奖，现在倒是后悔如果可以在界面设计上多花些功夫，说不定会有更好一点的成绩。 在前端老本行方面，用vue开发的公交医生在18年工业博览会上展出了。莫名总有种似曾相识的感觉，记得15年离职前，老板说实习做的demo会在年末的世界互联网大会上展出，这一次也是demo，不过进步的一点是，15年我只是为项目提供了微小的贡献，而18年时，我已经可以一个人carry整个前端了。 淘宝上的工作室还在营业，只不过由于学业繁忙，业务已经完全移交到招纳来的兼职员工手里，所期望的转型和议价能力这一年来并没有实现。 学术之路相比之下就格外坎坷，这一年做了4份不同类型的实验，但略显心力不足，甚至不敢深入，具体说来就是一种不敢努力的矛盾心理。经历了很多次失败之后，就会对继续这件事产生怀疑，从而迟迟不想行动。这种心理克服起来是异常困难的，并且伴随着随时会麻痹自己的危险，成为这一年最大的心病。 我时常感叹命运和人生的选择，观望着被命运眷顾的人的生活，却无能为力。生活的打击和折磨一如既往，仿佛剥夺了我快乐和骄傲的资本，我不得不以健忘来勉强应对。十年前的我第一次发现只要遗忘得足够快就可以使苦涩的生活看起来不这么艰难，所以我忘记了公式，忘记了重点，忘记了更多具体的事，以求逃过生活的刁难。我还学会了假装快乐，从此变得无动于衷和浑浑噩噩，在融入一个阶段之后又拼命想要逃离。 这一年始终在一种未知的情形下前行，生活单调却充满不确定性。与其说包含了无限可能，不如说充斥着各种危险，我痛心时间的流逝，却急着想和糟糕的经历告别。我不知道这一年的庸碌可以换来什么，刚开始的我盼望期许很多，最后却只希望不会比现状更糟。 19年已拉开序幕，我也慌乱地起跑，却也希望这一年从容而体面。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"失控","date":"2018-03-22T12:00:36.000Z","path":"2018/03/22/失控/","text":"我从前总是学着七堇年的口吻说，生活有多张面孔，我总是选择最疼痛的一张去触摸。然而是否生活只给我这一张面孔，我不得而知。 从来不曾出现意外之喜，际遇只懂得将我击入谷底，然后再将我拯救不至于万念俱灰。我熟稔于这样的套路，逐渐失了反抗的能力与决心。 小程序正式运营的第四天就大规模出现用户误操作的现象，或许是服务器性能的锅，是手机型号网络速度的锅，而我只能将锅都扛在自己的肩上。热情的人永远被当作交浅言深而备受冷落，承担任务最多的人一旦出现状况也会得不到理解。 群体种种，与其说是因缘而聚，不如说是因能力而聚，因为相互尊敬而彼此友好。这样的关系既不曾因为太过亲近而出现嫌隙，却会因不在人为的小事而分崩离析。 功亏一篑不足为道，然而时间对于现阶段的我来说，真的是太过重要了。20岁到30岁之间的任何一段时间，如果一无所获且糟糕不堪的话，着实令人痛心。 花费了长达2个月的时间去写基金申请书，不断推翻更新重写，再联系同一课题的合作方，对方已经表示没在做相关内容了。我痛恨挥霍光阴，却不想天不遂人愿：我总想平衡业务代码和算法素养之间的关系，可毕业与谋生更加迫在眉睫。我自诩能够吃苦，生活却准备了各种辛辣呛激的滋味等待我去品尝。那些应该分配给细水长流提升自己的时间，却被生活的辛酸苦楚消磨殆尽，我在此等命途的胁迫下，终究走向了碌碌无为。 本该顺应时代而学习的一些东西，在这些不得不做而似乎收益甚微的事件面前，一拖再拖，明日复明日。后来又开始劝诫自己何苦去争取那精英人士所在的位置，我所欠缺的不仅是禀赋和运气，更是取舍诸多事物的格局观。 4月也曾是原先繁忙学业中比较期待的月份，一年一度校园范围内的羽毛球赛我从大二起就不间断地参与，那时即便一天只睡四五个小时，也要保证练习的频率。现在三个月不拿球拍也是常有的事，料想今年即便参与也决计不可能再进入决赛圈，比赛从来都只知你技不如人，而不问你是否出于疏于练习。心境也到底不似几年前争强好胜那般，只当是强身健体预防猝死了。 每每在失落之中企盼自己在其他的事物上有所建树，然而所有的方面都仍是差强人意，在成为有用之人和有趣之人的意志中来回摇摆，时间紧迫，无须多言。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"微信小程序入门指南","date":"2018-01-31T10:58:47.000Z","path":"2018/01/31/微信小程序入门指南/","text":"人生中第一个微信小程序终于完工了，原本是个功能非常简单的工具，因为第一次做，期间经历了换后台框架、等待证书和调试等等坎坷，在这篇博客中将整个开发流程整理一下，以便后续参考。 准备工作注册小程序小程序和公众号共用一个注册入口微信公众平台，注册时选择小程序 流程大概是填写一系列登录信息和身份信息，注册的邮箱作为每次登录的凭证，每个邮箱只能申请一个小程序 注册完成之后可以进行一些设置，我用到的设置只有基本设置和开发设置，基本设置包括小程序头像、名称、类目和简介等，开发设置包括开发者ID和服务器域名两部分 其中开发者ID部分包括小程序ID和AppSecret小程序密钥，首次注册的时候选择生成密钥然后保存，如后续需要使用微信API（如获取openid等）需要AppID和AppSecret 服务器域名要求小程序后台请求域名已备案并开启https，进行配置后才能成功发起请求 域名配置后台服务器我选的是阿里云的云虚拟主机，其中共享虚拟主机普惠版只要6元/年，性价比极高，包含200M网页空间，10G月流量和20M数据库空间，作为一个小工具完全够用了，缺点是不能远程登录，只支持html和php，操作系统建议选择linux 然后就是备案，过程就是填写一些个人信息，购买幕布，拍照并上传，可能整个过程需要5到10天，并不是很久 备案的具体说明 然后就是后台程序的开发，由于不能远程登录，所以调试修改有些麻烦。目前云虚拟主机支持的PHP版本最高为5.5，我使用的框架是Yii2的basic版，上传源码时需要将整个包上传（一定要包含vendor），Yii2的具体细节下面会进行介绍 微信小程序要求服务器域名开启https，这个内容在上一篇博客中有介绍 阿里云云虚拟主机配置https 数据库配置此前我一直使用的mysql workbench，但使用了虚拟主机上的数据库之后，应用就经常发生卡顿和无法响应的情况，后来我发现阿里云提供了数据库操作的相关服务，选择云虚拟主机-&gt;管理-&gt;数据库信息-&gt;管理，然后进入DMS数据管理工具的登录页面 第一行的格式是主机域名(my3w.com):3306，第二行是数据库的用户名，第三行是数据库密码，用户名和密码都是申请主机时系统分配的，查看主机信息可以获取 登录进去左上角是数据库名称，一般为用户名_db，这里没有太值得注意的，为了使中文能够正常存储和使用，相关字段的编码设置为utf-8 Yii2框架配置这里只介绍框架的配置，框架的结构如图 config包含应用、数据库配置，controllers包含控制器，其中的action是请求参数的入口，models中的模型一般与数据库表相对应，有点像java中的java bean，vendor包含的是第三方类库，web中的index.php是访问入口 db.php web.php 关闭csrf是防止访问时出现400错误码 小程序调试小程序开发使用的是微信开发者工具，调试器和浏览器开发者工具有点类似，其中AppData可以跟踪每个页面的data值，比较直观 另外，为了防止开发者工具和真机出现不一致的情况，开发者工具还提供了真机调试的功能，点击预览，扫描二维码，就可以在手机上看到该小程序的开发版","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"阿里云云虚拟主机配置https","date":"2018-01-24T07:26:38.000Z","path":"2018/01/24/阿里云云虚拟主机配置https/","text":"最近开发的微信小程序后台要求使用https，为了节省成本而租用的云虚拟主机，配置https可谓大费周折，还差点因为https配置不成功，放弃了6元/年的云虚拟主机。 无法远程登录的云虚拟主机，据说只能借助CDN开半程的https，以下是具体的配置方法 准备工作首先，需要有一个在阿里云租用的云虚拟主机，并且绑定了域名。 然后购买CDN流量包（建站版） 购买证书https的高级证书很昂贵，但是为了推广https，会有基本版的免费证书，在安全（云盾）-&gt;CA证书服务（数据安全），点击购买证书 先选Symantec，然后选择1个域名，然后再选免费型DV SSL，选择立即购买。 输入域名进行基本的配置之后，就等待系统自动签发。 点击证书详情，选择云产品推送，推送CDN和负载均衡 配置域名产品与服务中选择CDN，然后选择添加域名 这里需要注意的是，一定是80端口，因为虚拟主机的443端口已被占用。 然后进入域名的配置，点击HTTPS设置的修改配置： 选择开启https之后，选择上传证书，然后公钥和私钥部分会自动填全 注意跳转类型选择HTTP-&gt;HTTPS HTTP/2我也开启了，似乎只是个优化 然后复制标题下面的CNAME 选择域名-&gt;解析 然后到了解析设置，选择添加解析 添加一条如下的解析： 其中CNAME是记录类型，www是主机记录，记录值是你刚刚复制的内容，其余均选择默认即可 等待几分钟刷新之后，就可以看到绿色的https啦～","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"微信小程序过程记录（一）","date":"2017-10-08T02:02:07.000Z","path":"2017/10/08/微信小程序过程记录/","text":"前两篇博客记录了微信小程序开发的一些准备工作，由于时间紧迫，需要前后端同时推进，这篇博客就记录其中一些比较繁杂凌乱的过程。 mysql存储中文数据想到同学的真实姓名要使用中文，理论上说mysql安装之后默认不支持中文存储，最便捷的方式当然是修改表的字符集。方法是选中表，右键选择Alter table，然后就是下图的样子，修改某些列的Collection，一般选择utf8_bin，与ci不同的是，这种字符集大小写敏感。然后点击Apply即可。 使用PHP重写作为一个命途多舛的编程绝缘体，还是没有经受住命运的拷问。在使用Python-Flask写完一个功能之后，突然想到先把服务器租起来吧，综合实用性和性价比，租了云虚拟主机。目前虚拟主机能否承受得住100人左右的并发尚不可知，但可以肯定的是虚拟主机不支持python,只能拿php重写。 于是我就使用yii2框架来实现小程序的后台，框架的搭建前文已经提到过了，在此不进行赘述。当然，虚拟主机不支持ssh远程登录，只能将vendor等文件夹一起传到根目录中。 在将后台api打包上传至虚拟主机之后，出现了以下的问题： include(/data/home/xxx/yiisoft/yii2/web/Memberer.php): failed to open stream: No such file or directory 觉得非常地诡异，解决方式如下： 1）设置全局composer命令 1mv composer.phar /usr/local/bin/composer 2）删除vendor目录，更新vendor目录 1composer install 虚拟主机删除文件错误码550更新后台代码包的时候，需要将之前的文件夹删掉，但是删除的时候出现了以下的错误： 550 Remove directory operation failed 其实是隐藏文件的问题，我使用的FTP工具是FileZilla，解决办法是选择菜单栏服务器-强制显示隐藏文件，重新连接服务器，通常要重连几遍才能删彻底。 复制新项目出现问题更新vendor目录后的项目出现了以下的错误： exception ‘yii\\base\\InvalidRouteException’ with message ‘Unable to resolve the request “site/error”.’ in /Users/yuzhiyuan/Documents/htdocs/yii-application/vendor/yiisoft/yii2/base/Module.php:461 发现好像新建项目之后把SiteController删除了，于是决定新建一个项目，现在的命令较之前有些差别，贴出来： 12345php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"php composer-setup.phpphp -r \"unlink('composer-setup.php');\"php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-basic /Users/apple/tjyx_backend 安装好之后测试了下php yii serve –docroot=’web’ –port=8888 在浏览器中输入http://localhost:8888/index.php 出现Congratulations!就说明项目基本完整，接下来就看功能了。 发请求出现的问题测试请求返回值是否正确的时候，依然报了以下的错： exception ‘yii\\base\\InvalidRouteException’ with message ‘Unable to resolve the request “site/error”.’ in /Users/yuzhiyuan/Documents/htdocs/yii-application/vendor/yiisoft/yii2/base/Module.php:461 找到了以下解决方案，本地测试返回了正确的返回值。在每个action前面加上这样一段话： 12345public function beforeAction($action)&#123; $this-&gt;enableCsrfValidation = false; return parent::beforeAction($action);&#125; 修改权限访问index.php首页的时候，出现了如下的错误： PHP warningchmod() has been disabled for security reasons 这个原因是asset权限不足，在ftp软件上修改成777即可。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"python flask连接mysql数据库","date":"2017-10-02T04:25:14.000Z","path":"2017/10/02/python-flask连接mysql数据库/","text":"flask连接mysql数据库踩了非常多的坑，后悔没有用php写后端，抛弃了熟悉的phpMyAdmin，命令行操作不熟的我选择了MySQL workbench。 MySQL Workbench 图形界面方便很多，但在刚开始建表的时候出现了这样的错误： Error 1005 “Can’t create table (errno: 13)” 害我检查了好几遍，并没有发现什么可疑的错误，后来才知道是要赋权限： 1sudo chown -R mysql:mysql /usr/local/mysql/data/my_database 其中，my_database是数据库的名称。要设计的逻辑比较简单，建表之后，就开始安装python连接mysql的驱动包。 flask_sqlalchemy选取mysql驱动包的过程可谓一波三折，有很多随着python版本升级而退出历史舞台的模块和写法，现在我python版本是2.7，为了以后能兼容3（当然我也不确定），我选用了flask_sqlalchemy。 安装这里还是用到超方便的工具pip，命令如下： 12pip install mysql-pythonpip install flask-sqlalchemy 但显然不可能这么顺遂，我在安装时报了这样的错： ld: library not found for -lsslclang: error: linker command failed with exit code 1 (use -v to see invocation)error: command ‘cc’ failed with exit status 1 我又从官网下载了源码安装包，进行编译安装，也是一样的错误。第一句好像是说openssl库找不到，我就使用brew来安装openssl。 12sudo chown -R $(whoami) /usr/localbrew install openssl 可是错误还是存在，反正我是怎么也没想到，解决方案是这样的： 1xcode-select --install 安装成功。 配置sqlalchemy12345678910111213141516171819202122232425#!flask/bin/python# -*- coding: utf-8 -*-from flask import Flaskfrom flask_sqlalchemy import SQLAlchemy app = Flask(__name__)#配置数据库驱动app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;]=&apos;mysql://root:myadminsql@localhost:3306/tjyx&apos; #这里登陆的是root用户，要填上自己的密码，MySQL的默认端口是3306，填上之前创建的数据库名app.config[&apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;]=True #设置这一项是每次请求结束后都会自动提交数据库中的变动db = SQLAlchemy(app) #实例化#定义表名class Member(db.Model): __tablename__ = &apos;member&apos; #定义表名 Id = db.Column(db.Integer,primary_key=True)#定义列对象 name = db.Column(db.String(64)) nickname = db.Column(db.String(64)) rest_time = db.Column(db.Integer) integral = db.Column(db.Integer)#执行插入操作user = Member(name = &apos;Yanke&apos;, nickname = &apos;Tom&apos;, rest_time = 12, integral = 100)db.session.add_all([user]) # 准备把对象写入数据库之前，先要将其添加到会话中db.session.commit()#提交会话到数据库 成功插入数据库。 这一期先到这里，2小时后就开始我的国庆青岛之旅了。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"部署在vultr上的python flask微信小程序后台","date":"2017-09-28T06:05:17.000Z","path":"2017/09/28/部署在vultr上的python-flask微信小程序后台/","text":"最近打算给羽毛球协会写个微信小程序，希望能由此推动无纸化进程。从大一开始，亲历了这个社团非常多的变化，从刚开始固定人数，现场填写表格到后来的微信群，群里报名统计，但干事的工作还是比较繁重的，其实这也是很多社团面临的问题。 目前还处于程序开发的初级阶段，后台选用了python的flask框架，尽管php是世界上最好的语言，人生苦短，我用python。 首先面对的一个问题就是外部接口，突然想起为了科学上网搭建的vps，值得担忧的问题是vultr的ping太高，处理同时报名活动这种高并发事件可能会有问题。但是还是先把功能完成，后续成熟时再租阿里云腾讯云啥的好了。 本地环境闲话少叙，我们直接进入本地环境的搭建环节。由于我是OSX系统，自带了python 2.7，另外由于我也经常写python，所以pip也是必不可少的。 安装virtualenv下载链接 virtualenv 其中我选择的是python wheel, 安装命令如下： 1sudo -H pip install virtualenv-15.1.0-py2.py3-none-any.whl 新建项目新建项目并安装flask包 1234mkdir test_apicd test_apivirtualenv flaskflask/bin/pip install flask 回到test_api目录，新建一个初始文件app.py，是一个hello world的简单示例： 1234567891011#!flask/bin/pythonfrom flask import Flaskapp = Flask(__name__)@app.route(&apos;/&apos;)def index(): return &quot;Hello, World!&quot;if __name__ == &apos;__main__&apos;: app.run(debug=True) 然后就可以在本地看到这个api返回的hello world了： 12chmod a+x app.py./app.py 第一次使用这个框架，我的做法是在本地调试，调试完成后再部署到服务器上，可以想到服务器返回结果可能会比较慢。 服务器环境我们最终的目的还是要将上述开发好的源码部署到服务器上，我选用的是现成的vultr，预装的是centos系统（只是因为我对centos比较熟悉，但其实Ubuntu类库更多也更主流） 首先我们连接到远程服务器，搭建一下python的环境 python环境搭建下载地址：python 我这里依旧选择了python2.7，懒得在本地更新到python3，两者的写法也有很大的区别。 解压安装 123456xz -d Python.xztar -xvf Python.tarcd Python./configuremakemake install 配置环境变量 12345vi ~/.bashrc加入一行export PATH=&quot;$PATH:/usr/local/bin/python&quot;返回source ~/.bashrc 输入python,出现相关信息说明安装完毕。 安装pip和virtualenv1yum install python-pip python-virtualenv 关闭端口8080 1iptables -A INPUT -p tcp --destination-port 8080 -j DROP 和本地差不多的步骤 1234567mkdir test_apicd test_apivirtualenv flasksource flask/bin/activatecd flaskpip install gunicornpip install flask 新建文件 1vi app.py 给出vultr官网的一个例子，粘贴到app.py中： 123456from flask import Flaskapp = Flask(__name__)@app.route(&apos;/&apos;)def hello_world(): return &apos;Hello, Vultr!&apos; 生成页面，其中2代表的是服务器CPU核心数的2倍的值，我的CPU core是1，所以这里就是2，冒号前面是py文件的名称，后面永远都是app: 1gunicorn -w 2 app:app &amp; 安装nginx，nginx支持多种配置，暂时只有这一个app，因此我就修改了默认配置: 123deactivateyum install nginxvi /etc/nginx/nginx.conf 将以下的内容粘贴进location /后面的一对大括号里： 12345proxy_set_header HOST $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_pass http://localhost:8000/; 检测一下nginx的语法是否正确： 1nginx -t -c /etc/nginx/nginx.conf 启动nginx: 1/usr/sbin/nginx -c /etc/nginx/nginx.conf 如修改了nginx.conf，可以重新加载： 1nginx -s reload 然后输入http:/vps的ip/就可以看到Hello Vultr的字样啦 好了，这一期先写到这里，后面有时间跟进会发布新的博客（然而应该并没有谁来看）。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"丧到爆炸的七月","date":"2017-07-13T07:50:31.000Z","path":"2017/07/13/丧到爆炸的七月/","text":"上海的炎夏终究还是猝不及防地到来了，没有去年的兵荒马乱，安静得让人觉得孤独。只是现在没办法感受那时的忧虑，日子习惯得让人麻木。 已经记不得有多少这样的时刻，对所有事物都失去了兴趣，明明有很多可以去做的事，却一直无法开始行动。比如一直想写的这篇博客，到7月底才真正完成。年纪大了也经常会失眠，没有迫不及待要去完成的事，也没有时间追赶的紧迫感，期待着一次次的放假开学，却每次都有理由让自己陷入片刻的欢愉之中。明知道以自己目前的能力，几乎不可能会比本科毕业时有好太多的发展，但还是日复一日地逃避现实，享受短暂的闲适。 人生根本没有太容易的事情，生活总是在似乎顺利的时刻埋下绊子。没有意外之喜，没有成竹在胸，只有毫无悬念的挫败。如果生活总是多种面孔，那么呈现给我的一定是最严厉的那面。然而荒谬的是，尽管要我失落绝望，却总在最后时刻给我一丝生机。 这一年尝试了很多事物，投了一篇论文，有了自己的博客、开了淘宝店，正在写一个兴趣使然的全端网站等等，然而每件事都不如想象中那般顺遂。 我固然明白长久的美好生活没有那么容易获得，太过顺利的时候也会下意识地产生担忧。越是年少的时候，越不懂让自己的人生变得充盈，所以只能在毫无情怀急躁冒进的年纪去拼命追赶。 生存、发展、生活都是至关重要的议题，一切以生存为基本，做“无用之事”的兴趣渐渐变得寡淡，在他人眼中的我，就变成了目的性极强的世俗机器，我无从争辩。想成为一个有趣的人，但在此之前，我应是一个独立自主的人。倘若我抛开现实中的种种，去粉饰我外表的光鲜，没有人会为我的潇洒而买单，那些亮丽充其量不过是转瞬之间消失的风景。 这个夏天没有什么特别的期待，坚持真实，崇尚自由。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"科学上网黑喂够","date":"2017-07-03T02:24:32.000Z","path":"2017/07/03/科学上网黑喂够/","text":"一直在探索如何科学上网，经历了红杏、时空隧道、小狐狸的充年跑之后，决心开辟一条长期有效极速舒心的科学道路。妈妈再也不用担心买裙裙的小钱钱扔进黄浦江了，服务更是比从前优秀了太多。闲话不多说，迅速开始我们的探索之旅。 租用vpsVultr是提供日本、美国、欧洲等多个国家地区机房的vps主机商，是目前市面上性价比较高的，最低档的带宽日常使用应该能结余不少，同时在线的可有3-5人，平摊到一人的费用大概7-12软妹币每月。 Vultr的资费基本如图所示：实测2.5美刀的套餐已经停售，满送的活动也截止上半年，果然绝缘体的生涯就是这么坎坷。不管怎样，还是尽快上车。Vultr不支持宝宝付款，不过注册个Paypal还是分分钟的事，so easy。 部署vps注册Vultr之后，点击servers的蓝色加号，进入配置页面，前面两个配置建议如下，东京的速度比较快。 选资费的时候，我们看到2.5美刀的已经停售了，5美刀的3，5个小伙伴使用还是很稳的，当然还有其他资费可以选择。 最后一项设置你vps的名字 其他的都不用设置，然后直接点击部署 连接vps点击查看你刚部署的vps 借助一些连接远程服务器的软件比如xshell就可以访问你刚刚部署的vps,当然使用mac OSX的小伙伴可以直接用终端。 输入yes和密码，回车 如果有需要的话，可以配置免密登陆，首先输入命令 1ssh-keygen 路径选择默认，key fingerprint直接回车，然后对ssh配置文件(/etc/ssh/sshd_config)进行修改，将以下几行取消注释 123RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 然后将我们个人计算中的密钥拷贝到服务器上 1cat ~/.ssh/id_rsa.pub | ssh user@host \"cat - &gt;&gt; ~/.ssh/authorized_keys\" 进行重启 1service sshd restart 然后我们就可以使用ssh root@ip来进行直接登陆了。 Shadowsocks需要同时在vps和你的pc上安装部署shadowsocks，首先在vps的centos 7上安装shadowsocks。 wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 这是一个一键安装脚本，使用详情 然后会提示你输入密码和端口，我们可以根据端口来分配用户，输入密码和端口之后，就出现了如下的信息 安装客户端shadowsocks 设置服务器设定 设置多用户如果想添加用户，修改vps上的json文件即可，输入以下的命令 cd /etcvi shadowsocks.json 我这里的文件的内容如下： 22345就是新添加的用户，设置一个独立的密码，就是在shadowsocks客户端配置的时候输入的。按i进入编辑模式，按esc退出编辑，再按两下大写z退出该文件，然后重启shadowsocks服务器端。 /etc/init.d/shadowsocks restart VPS加速——TCP-BBR拥堵算法TCP-BBR是谷歌推出的用来替代收费锐速的单边加速TCP连接效果的开源算法，主要思想是跑满带宽，且避免排队。 以下是CentOS7的执行步骤 更换内核123rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-ml -y 查看内核是否安装成功1rpm -qa | grep kernel 更新grub系统引导文件并重启123egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'grub2-set-default 0 #default 0表示第一个内核设置为默认运行, 选择最新内核就对了reboot 执行一键安装脚本123wget --no-check-certificate https://github.com/iyuco/scripts/raw/master/bbr.shchmod +x bbr.sh./bbr.sh 提示重启，重启后登入VPS，验证内核是否安装成功 1uname -r 检测是否生效 1sysctl net.ipv4.tcp_available_congestion_control 返回值若为：net.ipv4.tcp_available_congestion_control = bbr cubic reno 即可 1sysctl net.ipv4.tcp_congestion_control 返回值若为：net.ipv4.tcp_congestion_control = bbr 即可 1sysctl net.core.default_qdisc 返回值若为：net.core.default_qdisc = fq 即可 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明bbr已启动 最后一步，非常关键，如果你vps可以ssh登陆，却无法打开谷歌，有可能是因为没有关防火墙 1systemctl stop firewalld.service 稳如狗开始我们的科学上网之旅吧","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"Mac OSX下phpMyAdmin安装配置","date":"2017-05-07T06:26:31.000Z","path":"2017/05/07/Mac-OSX下phpMyAdmin安装配置/","text":"phpMyAdmin为了连接mysql数据库和php代码，我使用了phpMyAdmin，对于一个初出茅庐的新手来说，phpMyAdmin的安装配置稍显复杂，参考了网上一些博客，终于能够正常使用。 下载地址phpMyAdmin下载地址 安装配置由于phpMyAdmin的运行需要借助Apache，因此我们需要将压缩包解压到Apache的服务器根目录下，在OSX系统中，这个位置是/Library/WebServer/Documents，点击Finder的前往文件夹就可以访问除此之外，我们需要修改一下Apache中的配置文件，用同样的方法进入/etc/apache2/中，打开httpd.conf，找到这句 DirectoryIndex index.html 在后面加上index.php再加上一句1SetHandler application/x-httpd-php 接下来打开phpMyAdmin文件夹中的libraries里的config.default.php,进行如下的修改：1$cfg[&apos;PmaAbsoluteUri&apos;] = &apos;http://localhost/phpmyadmin/&apos;; 这句话是你在浏览器中键入访问phpmyadmin的地址1$cfg[&apos;blowfish_secret&apos;] = &apos;xxxxxx&apos;; 这句话是一个类似身份验证的东西，一定要填，不然会报错1$cfg[&apos;Servers&apos;][$i][&apos;host&apos;] = &apos;127.0.0.1&apos;; 你数据库的密码12$cfg[&apos;Servers&apos;][$i][&apos;password&apos;] = &apos;xxxxxx&apos;;$cfg[&apos;Servers&apos;][$i][&apos;hide_db&apos;] = &apos;information_schema&apos;; 需要修改的部分就到这里，然后拷贝一份到phpmyadmin下面，名称改为config.inc.php 问题回顾在浏览器中输入http://localhost/phpmyadmin应该就能显示phpMyAdmin的登录页面了，但是在登录过程中，可能会出现这样的错误： 1862, Your password has expired. To log in you must change it using a client that supports expired passwords. 这说明mysql的密码过期了，这种情况一般发生在刚安装mysql之后，使用初始密码登录的情况，那么我们就需要修改mysql的密码：终端输入： 1cd /usr/local/mysql/bin/ 然后使用管理员权限登录1sudo su 登录mysql1mysql -u root -p 输入原始密码，然后修改密码：1SET PASSWORD = PASSWORD(&apos;xxxxxxxxx&apos;);","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"第一个yii2应用","date":"2017-04-17T16:21:38.000Z","path":"2017/04/18/第一个yii2应用/","text":"最近在做一个网站，打算用vue写前端，用yii2写后端，vue的安装过程比较顺利，记录一下Mac OSX搭建yii2框架的过程。 安装ComposerComposer下载地址或者键入以下命令1234php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410&apos;) &#123; echo &apos;Installer verified&apos;; &#125; else &#123; echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); &#125; echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink(&apos;composer-setup.php&apos;);&quot; 创建应用模版我安装的是高级应用模版1php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced /Users/lolilukia/test 初始化在初始化之前，我就想运行，结果出现了如下的错误 Could not open input file: yii 需要初始化一下应用1sudo php init 发现需要一个Token, Token是从github上获取的Token生成地址 运行运行这里费了很多周折，首先，输入指令1php yii serve 发现出现了如下的报错 Document root “/Users/lolilukia/test/console/web” does not exist 一看确实没有，但是我们的主页分明是frontend/web里的index.php啊输入以下指令1php yii serve --docroot = &quot;frontend/web&quot; 发现出现了如下的错误 Document root “1” does not exist 这个问题非常的诡异，经过思考，我把指令改成了这样1php yii serve --docroot=&apos;frontend/web&apos; 非常优秀，终于出现了http://localhost:8080 is token by another process的字样，默认端口是8080，可我的vue应用占用了8080端口，于是又改了个参数：1php yii serve --docroot=&apos;frontend/web&apos; --port=8888 终于成功啦！当然我是为了做后端项目，后端的运行地址是’backend/web’，看来以后也可以尝试用它来做全站项目。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"Linux实用指令记录","date":"2017-04-15T06:46:19.000Z","path":"2017/04/15/Linux实用指令记录/","text":"关闭SELinux12vi /etc/sysconfig/selinuxSELinux=disabled 解压12tar -zxvf xxx.tar.gzunzip xxx.zip 安装工具1yum -y install xxx 重新启动12rebootshutdown -r now vim的使用1234vi xxx //编辑xxx文件按i进入insert模式再按Esc退出，连续按两次大写Z退出vim输入/xxx，在文中查找xxx 开启CUDA1nvidia-xconfig -query-gpu-info 设置权限12chmod a+x xxxchmod -R 777 xxx //传递给子文件夹 修改hostname1vi /etc/hostname 输出当前路径1pwd 安装dukto123cd /etc/yum.repos.d/wget http://download.opensuse.org/repositories/home:colomboem/CentOS_7/home:colomboem.repoyum install dukto 传输文件夹1scp -r /docu/ root@node2: /opt 修改文件（夹）名1mv 修改前文件（夹）名 修改后文件（夹）名 删除文件（夹）1rm -rf 文件夹名 进入图形界面1startx 挂载移动硬盘1234567安装ntfs-3g（去官网下载）cd /mntmkdir ddjfdisk -l 看移动硬盘的磁盘名称mount -t ntfs-3g /dev/sdc /mnt/ddjmountdf -H 查看是否成功挂载 查找含某个关键字的文件1grep -r &quot;xxx&quot; /xxx/xxx（目录） 修改日期1date -s 2016-xx-xx 修改一个文件夹下所有文件的时间1touch -d 2016-xx-xx xx(文件夹路径）","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"Centos集群搭建","date":"2017-04-04T09:16:04.000Z","path":"2017/04/04/Centos集群搭建/","text":"关闭防火墙和SELinux123#systemctl disable firewalld#systemctl stop firewalldvi /etc/sysconfig/selinux 确保SELINUX=disabled 然后执行1setenforce或reboot 设置防火墙规则12firewall-cmd --permanent --add-service=high-availabilityfirewall-cmd --add-service=high-availability 主机名解析 修改主机名 12345vi /etc/hostnamenode1systemctl restart network.servicehostnamenode1 验证是否为node1 配置主机表 123vi /etc/hosts192.168.xx.xx node1192.168.xx.xx node2 配置无密访问123ssh-keygen -t rsascp /root/.ssh/id_rsa.pub root@node2:/root/.ssh/authorized_keysssh node2 date //测试","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"linux系统安装问题集锦","date":"2017-03-28T07:22:32.000Z","path":"2017/03/28/linux系统安装问题集锦/","text":"Centos/win双系统win10引导丢失1vi /boot/grub2/grub.cfg 加入1234567###BEGIN /etc/grub.d/40_custom###menuentry &quot;windows10&quot;&#123; insmod part_msdos insmod ntfs set root = &apos;(hd0, msdos1)&apos; chainloader+1&#125; 安装系统时出现UEFI问题分区时将/boot/efi添加进去 系统启动时出现dracut-initqueue问题 warning: /dev/root does not exist12dracut:/# cd /devdracut:/dev #ls 将启动项改为1hd: /dev/sdb4 xxxx quiet 系统安装时将引导程序装在了U盘上用U盘启动，在终端中输入12$sudo grubgrub&gt; find /boot/grub/stage1 然后记录下打印的结果修改menulist文件，将记录下的结果放在root的后面 使用ssh-add出现Could not open a connection12ssh-agent bash --login -issh-add ~/.ssh/id_rsa 使用yum安装出现Another app is currently holding the yumlock1rm -f /var/run/yum.pid Can’t locate Switch.pm in @INC1yum install perl-Switch Host key verification failed1ssh-keygen -R xxx(要连接的服务器IP)","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"Hexo博客添加404页面和百度统计","date":"2017-03-23T15:23:49.000Z","path":"2017/03/23/Hexo博客添加404页面和百度统计/","text":"最近几天一直在下实验数据，实验暂且搁置，用了些时间在改造个人博客上。添加404页面和百度统计，工作量不大，但是非常实用。 添加404页面我使用的是腾讯公益404页面，主要是宣传寻找走失儿童的，借博客的力量让更多人看到，当然自定义404页面也是差不多的道理首先在source文件夹下，创建一个404.html文件 腾讯公益40412345678910111213141516&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://lolilukia.com&quot; homePageName=&quot;Back to homepage&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在博客的_config.yml文件中标记防止被主题渲染1skip_render: 404.html 百度统计我用的主题是Litten的yilia，在themes/yilia的_config.yml文件中，将百度统计属性开启1baidu_analytics: true 然后注册百度统计账号，获取代码插入博客代码中，并检测安装，代码格式如下：123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 打开themes/yilia/layout/_partial/baidu-analytics.ejs，插入如下格式的代码1234567891011&lt;% if (theme.baidu_analytics)&#123; %&gt;&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt;&lt;% &#125; %&gt; 打开同目录下的head.ejs，插入1&lt;%- partial(&apos;baidu_tongji&apos;) %&gt; 然后clean,generate,deploy，经过20分钟之后，打开管理中心就可以看到统计结果了","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]},{"title":"重忆来时路","date":"2017-03-19T07:06:52.000Z","path":"2017/03/19/重忆来时路/","text":"这个学期，终于几乎从社团生涯中隐退。可能别人无法理解这是一种怎样的状态，我在本科毕业之际写过一篇有关社团经历的文章来纪念那些日子。曾有人问我读博的目的，其实我也并不是有多么大梦想和抱负的人，但应该没有人会相信，能够继续混迹于社团活动之中，成为其中一个重要的原因。融入那些有着共同兴趣，有相同生活风格的人群中，享受欢愉的片刻，让我感到一丝宁静。虽然他们都是学生中的普通人，平日上课，考试周在图书馆做题看书，也有焦虑无奈。但是你怎知他未曾在大型舞台上演出，怎知他不是日麻高手，怎知他不是知名公众号的运营者，怎知他是否在球场上一人骁勇善战敌得过千军万马。在这个全新的圈子里，有幸看到每个人闪光甚至可以称之为传奇的一面。大学本科的四年中，我遇到诸多这样身怀绝技的人。可以说，我究其一生，想要达到的期望也不过如此。想再学更多的技能，想要见识更多能让生活变得美好的方式，想要遇见更多愿意将这份快乐传递给他人的人。但是终于也到了告别的时刻，继续下去也不是一个好的选择。 突然很想用完整的一天，去回忆迄今为止全部的人生12年上半年，世界末日的预言悄悄流行。班主任突然说，即便这是真实的，你们也足够幸运，进入新环境的年轻人总是欣喜，去体会半年的大学生活，也不至于有太多的遗憾。 果然，从2012年的9月开始，就全然忘却了这个预言。 为12年的迎新晚会写了主持稿和朗诵稿，在后台递话筒的我听完了全程，听到那首《温柔》的吉他弹唱，突然有种莫名的感动。 现在的我再也写不出那样的文字，而当晚弹吉他的同学，似乎晚会结束之后就再没见过。那年是第一次到这个偏僻的校区，慌忙之中迷了路，那时也没有想过将会在这里度过近十年。 12年12月某个下雨的夜晚，曾徒步从本部走到了外滩。那年跨年夜有灯光秀，用渣像素的相机拍了几张烟花，在返回的人潮中挤掉了一枚徽章。14年跨年夜在外滩想重温没有看完整的灯光秀，在桥上冻了一夜，没有表演，没有烟花，返回时只看到飞驰而过的救护车。 13年可能是人人网的巅峰，涌现了一批令人惊艳的写手，那时使用人人的频率堪比如今的朋友圈，但朋友圈从未令我印象深刻。转载的文章有些已经不在，幸存的再看仍是热泪盈眶。最后的一条状态停留在了2015年的7月。 13年充数参加了第一届上理公开赛，惨不忍睹。同年在南校区加入了毽球队，最后放弃了二工大的那次比赛。 13年选修课就已修满16学分（8学分即可毕业），之后几年由于害怕受到学校的制裁，压抑了自己不断学习新技能的欲望。 14年和我妈去看了新街口在上海的演出，穿上自己P图的T恤，新街口组合在CD上签了名。我还问了MC晗怎么瘦下来的，他激动得从舞台上跳下来说，你如果失恋了，也会马上瘦下来。 14年的樱花季收到了上一年写给自己的信，恰好在去本部的那天。每年都会经过系着五色彩带的卡片，匆匆走过却没有留下任何的愿望。总在幻想13年的自己也会出现在同样的地点，我应该走上前跟她说些什么。 14年看了最多的展览，曾对某个行为艺术家印象深刻。两个陌生女孩请我看了大陆首届失恋展（3个人的票比2个人的便宜），看过每一件展品，写了冗长的留言，从展馆出来的时候终于释怀。 15年开始实习，只能说既不能让他人满意，也不能让自己满意。平静和愉悦的过程无法真正学习到什么，只有窘迫和焦虑的心境下才能换来经验和学识。 那时看到人人上流行毕业时的一百张照片，我也曾打算在毕业时总结出一个四年间种种经历的相册，以后时常翻看也能有继续生活的勇气。不知道回忆是否是逃避的选择，本能拥有更多的快乐，却选择了一条异常艰险的道路。虽然万事万物的收获都有其代价，我也仅是企盼不虚此行。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"CESM模式1.2.0环境搭建指南","date":"2017-03-16T15:28:37.000Z","path":"2017/03/16/CESM模式1-2-0环境搭建指南/","text":"研究气象模式转眼已经有了一年多的时间，主攻的方向是CESM模式的性能优化，这套内容其实在2015年就已经发布在论坛上，现在仅作为一个搬运，充实个人博客的内容。 安装PGIPGI是可以运行CESM所需的编译器的一种，还可以使用ifort，PGI新版无破解，需要购买，10.6版本有破解，但没有CUDA组件123mkdir pgicd 你解压PGI安装包的目录./install 这里我的安装目录是/opt/pgi，然后配置环境变量123456vi ~/.bashrcexport PGI=/opt/pgi/linux86-64/10.6/ export MANPATH=$MANPATH:$PGI/man export LM_LICENSE_FILE=/opt/pgi/license.dat export PATH=$PATH:$PGI/bin source ./bashrc 然后检测PGI是否安装成功，输入pgf90,如果出现$pgf90-Warning-No files to process即为成功 安装zlib下载传送门123cd 解压目录./configure --prefix=/home/ed/localmake check install 如果出现了No shared library support的报错，说明需要指定编译器，可以替换成如下的命令1./configure --prefix=/home/ed/local --sharedlibdir=/opt/pgi/linux86-64/15.10/lib 安装hdf5下载传送门12345cd 解压目录./configure --with-zlib=/home/ed/local --prefix=/home/ed/localmakemake checkmake install netcdf系列安装netcdf从4.2就开始分开了,netcdf-c和netcdf-fortran一定要装在一起,并且使用同一个编译器,不然就会出现很难解决的错误 netcdf下载传送门12345cd 解压目录CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-c下载传送门1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-fortran先添加一个环境变量12export LD_LIBRARY_PATH=/home/ed/local/lib:$&#123;LD_LIBRARY_PATH&#125;source ~/.bashrc 然后进行安装1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install 注意：重新make的话，要先运行make clean 配置netcdf的环境变量 12345vi ~/.bashrcexport NETCDF=/home/ed/localexport PATH=$PATH:$NETCDF/bin:$NETCDF/include:$NETCDF/libexport MANPATH=$MANPATH:$NETCDF/share/mansource ~/.bashrc 检测netcdf是否安装成功：ncdump 安装mpich建议安装的版本是3.1.1 配置CESM打开scripts/ccsm_utils/Machines,里面有个config_machines.xml打开在后面添加，按自己目录酌情修改123456789101112131415161718&lt;machine MACH=&quot;newmach&quot;&gt; //machine name自己取的，newmach &lt;DESC&gt;os is Linux&lt;/DESC&gt; &lt;OS&gt;LINUX&lt;/OS&gt; &lt;COMPILERS&gt;pgi&lt;/COMPILERS&gt; &lt;MPILIBS&gt;mpich&lt;/MPILIBS&gt; &lt;RUNDIR&gt;/cesm/cesm1_2_0/$CASE/run&lt;/RUNDIR&gt; //自己定的 &lt;EXEROOT&gt;/cesm/cesm1_2_0/$CASE/bld&lt;/EXEROOT&gt; &lt;DIN_LOC_ROOT&gt;/cesm/cesm1_2_0/inputdata&lt;/DIN_LOC_ROOT&gt; //文件夹事先要创建 &lt;DIN_LOC_ROOT_CLMFORC&gt;/cesm/cesm1_2_0/lmwg&lt;/DIN_LOC_ROOT_CLMFORC&gt; &lt;DOUT_S_ROOT&gt;/cesm/cesm1_2_0/archive/$CASE&lt;/DOUT_S_ROOT&gt; &lt;DOUT_L_MSROOT&gt;/cesm/cesm1_2_0/$CASE&lt;/DOUT_L_MSROOT&gt; &lt;CCSM_BASELINE&gt;/cesm/cesm1_2_0/ccsm_baselines&lt;/CCSM_BASELINE&gt; &lt;CCSM_CPRNC&gt;/cesm/cesm1_2_0/tools/cprnc&lt;/CCSM_CPRNC&gt; &lt;SUPPORTED_BY&gt;srinathv -at- ucar.edu&lt;/SUPPORTED_BY&gt; &lt;GMAKE_J&gt;2&lt;/GMAKE_J&gt; //建议填1或2 &lt;MAX_TASKS_PER_NODE&gt;8&lt;/MAX_TASKS_PER_NODE&gt; &lt;PES_PER_NODE&gt;16&lt;/PES_PER_NODE&gt;&lt;/machine&gt; 然后打开config_compiler.xml打开在后面添加12345&lt;compiler MACH=&quot;newmach&quot;&gt; &lt;NETCDF_PATH&gt;/home/ed/local&lt;/NETCDF_PATH&gt; &lt;ADD_SLIBS&gt;-L/home/ed/local/lib -lnetcdf -lnetcdff&lt;/ADD_SLIBS&gt; &lt;MPI_PATH&gt;/home/ed/local/mpich&lt;/MPI_PATH&gt;&lt;/compiler&gt; 然后执行cp env_mach_specific.userdefined env_mach_specific.newmach,在后面添加123456set NETCDF_PATH = /home/ed/localset MPI_PATH = /home/ed/local/mpichsetenv INC_NETCDF $&#123;NETCDF_PATH&#125;/includesetenv LIB_NETCDF $&#123;NETCDF_PATH&#125;/libsetenv INC_MPI $&#123;MPI_PATH&#125;/includesetenv LIB_MPI $&#123;MPI_PATH&#125;/lib 然后执行cp mkbatch.userdefined mkbatch.newmach,修改按照自己机器的情况,将两句含有mpi执行命令（mpiexec和mpirun）的其中一句解除注释，就可以了 运行CESM先到models/utils/pio下1./configure 然后cd到models/utils/mct下1./configure CC=pgcc FC=pgf90 注：如果出现C编译器的相关问题，就重装PGI 到scripts目录1./create_newcase -case /cesm/cesm1_2_0/case -mach newmach -compset X -res f19_g16 然后进入case那个目录1234./cesm_setup./case.clean_build (svn :用户名：guestuser 密码：friendly)./case.build./case.run 当时摸索用了1个月的时间，希望之后的同学可以少走些弯路。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"MacOS + selenium + python 极速搭建","date":"2017-03-15T02:58:23.000Z","path":"2017/03/15/MacOS-selenium-python极速搭建/","text":"大四实习临离职的时候做过一周的自动化测试，用的是公司电脑里的Eclipse，导了几个jar包，用java写的一套自动化测试，比较入门，但是实现测试用例还是足够了的，如今为了小公主的面试，我决定试试MacOS的水。 不得不说，MacOS是真方便啊。 环境搭建MacOS自带了python2.7，默认安装目录是/usr/bin/python, 还需要一个文本编辑器，用sublime即可，美观高亮 安装selenium1sudo easy_install selenium 以Firefox为例，安装geckodriver驱动下载解压之后，移动到/usr/local/bin中1sudo mv ~/Downloads/geckodriver /usr/local/bin/ 如果出现了以下的问题，就是没有安装geckodriver selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH. 简单的自动化测试脚本打开sublime，键入几句简单的测试代码123456789from selenium import webdriverfrom selenium.common.exceptions import NoSuchElementExceptionfrom selenium.webdriver.common.keys import Keysimport timebrowser = webdriver.Firefox() browser.get(&quot;http://www.baidu.com&quot;) assert &quot;Hahaha&quot; in browser.titlebrowser.close() 保存成test.py，然后在命令行中运行1python test.py 如果出现了如下的错误 selenium.common.exceptions.WebDriverException: Message: Missing ‘marionetteProtocol’ field in handshake 说明Firefox的版本太老了，更新之后再运行，发现百度的页面打开，这个简单脚本就运行成功了。 有时间的时候再探究一下Chrome。 一个稍显复杂的例子功能简介这个脚本的作用是从豆瓣某个小组里面搜索包含‘上海’关键词的帖子，然后一分钟一刷新浏览器，出现新帖子就给目标邮箱发邮件，邮件正文内容就是帖子的链接。 脚本地址douban_script","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"第一篇个人博客的诞生","date":"2017-03-14T15:42:45.000Z","path":"2017/03/14/第一篇个人博客的诞生/","text":"大学四年转瞬而过，始终都没有时间好好地写一篇博客，在回顾过去的历程之前，记录一下这篇博客诞生的始末。 这篇博客使用了简洁轻便的Hexo平台和github的免费挂载，可能在未来某个打算花费大量精力打造博客的时刻购买一个个性化的域名。 第一篇个人博客的诞生，是一个值得纪念的时间节点，代表我终于从长时间的焦虑中逐渐缓解，学会如何分享和思考。 首先提到github，大三和大四实习期间使用github协作的时候很多，但几乎全是未曾公开的实习代码，随着离职也都被移出了协作。这两年间也几乎没写过为了兴趣为了欣赏的作品，目的性很强，但技术却没得到长足的进步。 想做很多当下比较流行的事，个人博客是其中一件。 安装环境装Nodejs是必要的，之前实习有用到，创建一个放置个人博客的文件夹，cd到文件夹下，使用如下命令安装Hexo1sudo npm install -g hexo 然后对Hexo进行初始化操作1hexo init 生成静态页面1hexo generate 启动预览1hexo server 打开http://localhost:4000就看到了Hexo的欢迎页 关联Github之前发现github.io可以挂载自定义的html页面，也有过自己编写博客模版的打算，先作为一个小目标去努力。 首先创建一个Repository，以我的个人博客为例，Repository的名字就是lolilukia.github.io 然后cd到个人博客的文件夹下，编辑_config.yml文件1vim _config.yml 按i进行插入修改操作，修改以下内容：1234567deploy: type: git repo: https://github.com/lolilukia/lolilukia.github.io.git branch: master 然后按esc退出编辑模式，连按两次大写Z保存并退出，退出后继续执行命令1npm install hexo-deployer-git --save 部署1hexo deploy 打开http://lolilukia.github.io，就可以看到Hexo的欢迎页了 使用主题这个个人博客的主题来自Litten，说实话它的设计给了我会心一击，我在寒假的时候曾经想要写一个个人博客模板，虽说细节并不相同，但侧边栏的设计惊人地相似，不得不说这个主题很有科技感，敬佩和羡慕之情油然而生。 首先将这个主题拷贝到本地，也就是个人博客目录下的主题文件夹中1git clone https://github.com/litten/hexo-theme-yilia.git /Users/apple/blog/themes/yilia 修改blog下的_config.yml1vim _config.yml 将themes后的默认landscope改为yilia 最后一步就是cd到yilia文件夹下更改配置1vim _config.yml 更改作者、友链等相关栏目，重新启动服务，就可以看到主题了。 编写博客博客的原理是将markdown文档放到source/_posts文件夹下，然后生成静态页面。 首先新建一个文章1hexo new &quot;第一篇个人博客的诞生&quot; 在source/_posts中会生成一个md文件，用编辑器打开进行编辑，然后执行如下的操作1234hexo cleanhexo generatehexo deployhexo server 打开http://localhost:4000就能看到新写的博文啦～","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]}]