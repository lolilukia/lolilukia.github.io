[{"title":"第一个yii2应用","date":"2017-04-17T16:21:38.000Z","path":"2017/04/18/第一个yii2应用/","text":"最近在做一个网站，打算用vue写前端，用yii2写后端，vue的安装过程比较顺利，记录一下Mac OSX搭建yii2框架的过程。 安装ComposerComposer下载地址或者键入以下命令1234php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410&apos;) &#123; echo &apos;Installer verified&apos;; &#125; else &#123; echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); &#125; echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink(&apos;composer-setup.php&apos;);&quot; 创建应用模版我安装的是高级应用模版1php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced /Users/lolilukia/test 初始化在初始化之前，我就想运行，结果出现了如下的错误 Could not open input file: yii 需要初始化一下应用1sudo php init 发现需要一个Token, Token是从github上获取的Token生成地址 运行运行这里费了很多周折，首先，输入指令1php yii serve 发现出现了如下的报错 Document root “/Users/lolilukia/test/console/web” does not exist 一看确实没有，但是我们的主页分明是frontend/web里的index.php啊输入以下指令1php yii serve --docroot = &quot;frontend/web&quot; 发现出现了如下的错误 Document root “1” does not exist 这个问题非常的诡异，经过思考，我把指令改成了这样1php yii serve --docroot=&apos;frontend/web&apos; 非常优秀，终于出现了http://localhost:8080 is token by another process的字样，默认端口是8080，可我的vue应用占用了8080端口，于是又改了个参数：1php yii serve --docroot=&apos;frontend/web&apos; --port=8888 终于成功啦！当然我是为了做后端项目，后端的运行地址是’backend/web’，看来以后也可以尝试用它来做全站项目。","tags":[{"name":"php","slug":"php","permalink":"http://lolilukia.com/tags/php/"}]},{"title":"Linux实用指令记录","date":"2017-04-15T06:46:19.000Z","path":"2017/04/15/Linux实用指令记录/","text":"关闭SELinux12vi /etc/sysconfig/selinuxSELinux=disabled 解压12tar -zxvf xxx.tar.gzunzip xxx.zip 安装工具1yum -y install xxx 重新启动12rebootshutdown -r now vim的使用1234vi xxx //编辑xxx文件按i进入insert模式再按Esc退出，连续按两次大写Z退出vim输入/xxx，在文中查找xxx 开启CUDA1nvidia-xconfig -query-gpu-info 设置权限12chmod a+x xxxchmod -R 777 xxx //传递给子文件夹 修改hostname1vi /etc/hostname 输出当前路径1pwd 安装dukto123cd /etc/yum.repos.d/wget http://download.opensuse.org/repositories/home:colomboem/CentOS_7/home:colomboem.repoyum install dukto 传输文件夹1scp -r /docu/ root@node2: /opt 修改文件（夹）名1mv 修改前文件（夹）名 修改后文件（夹）名 删除文件（夹）1rm -rf 文件夹名 进入图形界面1startx 挂载移动硬盘1234567安装ntfs-3g（去官网下载）cd /mntmkdir ddjfdisk -l 看移动硬盘的磁盘名称mount -t ntfs-3g /dev/sdc /mnt/ddjmountdf -H 查看是否成功挂载 查找含某个关键字的文件1grep -r &quot;xxx&quot; /xxx/xxx（目录） 修改日期1date -s 2016-xx-xx 修改一个文件夹下所有文件的时间1touch -d 2016-xx-xx xx(文件夹路径）","tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"Centos集群搭建","date":"2017-04-04T09:16:04.000Z","path":"2017/04/04/Centos集群搭建/","text":"关闭防火墙和SELinux123#systemctl disable firewalld#systemctl stop firewalldvi /etc/sysconfig/selinux 确保SELINUX=disabled 然后执行1setenforce或reboot 设置防火墙规则12firewall-cmd --permanent --add-service=high-availabilityfirewall-cmd --add-service=high-availability 主机名解析 修改主机名 12345vi /etc/hostnamenode1systemctl restart network.servicehostnamenode1 验证是否为node1 配置主机表 123vi /etc/hosts192.168.xx.xx node1192.168.xx.xx node2 配置无密访问123ssh-keygen -t rsascp /root/.ssh/id_rsa.pub root@node2:/root/.ssh/authorized_keysssh node2 date //测试","tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"linux系统安装问题集锦","date":"2017-03-28T07:22:32.000Z","path":"2017/03/28/linux系统安装问题集锦/","text":"Centos/win双系统win10引导丢失1vi /boot/grub2/grub.cfg 加入1234567###BEGIN /etc/grub.d/40_custom###menuentry &quot;windows10&quot;&#123; insmod part_msdos insmod ntfs set root = &apos;(hd0, msdos1)&apos; chainloader+1&#125; 安装系统时出现UEFI问题分区时将/boot/efi添加进去 系统启动时出现dracut-initqueue问题 warning: /dev/root does not exist12dracut:/# cd /devdracut:/dev #ls 将启动项改为1hd: /dev/sdb4 xxxx quiet 系统安装时将引导程序装在了U盘上用U盘启动，在终端中输入12$sudo grubgrub&gt; find /boot/grub/stage1 然后记录下打印的结果修改menulist文件，将记录下的结果放在root的后面 使用ssh-add出现Could not open a connection12ssh-agent bash --login -issh-add ~/.ssh/id_rsa 使用yum安装出现Another app is currently holding the yumlock1rm -f /var/run/yum.pid Can’t locate Switch.pm in @INC1yum install perl-Switch Host key verification failed1ssh-keygen -R xxx(要连接的服务器IP)","tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"Hexo博客添加404页面和百度统计","date":"2017-03-23T15:23:49.000Z","path":"2017/03/23/Hexo博客添加404页面和百度统计/","text":"最近几天一直在下实验数据，实验暂且搁置，用了些时间在改造个人博客上。添加404页面和百度统计，工作量不大，但是非常实用。 添加404页面我使用的是腾讯公益404页面，主要是宣传寻找走失儿童的，借博客的力量让更多人看到，当然自定义404页面也是差不多的道理首先在source文件夹下，创建一个404.html文件 腾讯公益40412345678910111213141516&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://lolilukia.com&quot; homePageName=&quot;Back to homepage&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在博客的_config.yml文件中标记防止被主题渲染1skip_render: 404.html 百度统计我用的主题是Litten的yilia，在themes/yilia的_config.yml文件中，将百度统计属性开启1baidu_analytics: true 然后注册百度统计账号，获取代码插入博客代码中，并检测安装，代码格式如下：123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 打开themes/yilia/layout/_partial/baidu-analytics.ejs，插入如下格式的代码1234567891011&lt;% if (theme.baidu_analytics)&#123; %&gt;&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt;&lt;% &#125; %&gt; 打开同目录下的head.ejs，插入1&lt;%- partial(&apos;baidu_tongji&apos;) %&gt; 然后clean,generate,deploy，经过20分钟之后，打开管理中心就可以看到统计结果了","tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]},{"title":"重忆来时路","date":"2017-03-19T07:06:52.000Z","path":"2017/03/19/重忆来时路/","text":"这个学期，终于几乎从社团生涯中隐退。可能别人无法理解这是一种怎样的状态，我在本科毕业之际写过一篇有关社团经历的文章来纪念那些日子。曾有人问我读博的目的，其实我也并不是有多么大梦想和抱负的人，但应该没有人会相信，能够继续混迹于社团活动之中，成为其中一个重要的原因。融入那些有着共同兴趣，有相同生活风格的人群中，享受欢愉的片刻，让我感到一丝宁静。虽然他们都是学生中的普通人，平日上课，考试周在图书馆做题看书，也有焦虑无奈。但是你怎知他未曾在大型舞台上演出，怎知他不是日麻高手，怎知他不是知名公众号的运营者，怎知他是否在球场上一人骁勇善战敌得过千军万马。在这个全新的圈子里，有幸看到每个人闪光甚至可以称之为传奇的一面。大学本科的四年中，我遇到诸多这样身怀绝技的人。可以说，我究其一生，想要达到的期望也不过如此。想再学更多的技能，想要见识更多能让生活变得美好的方式，想要遇见更多愿意将这份快乐传递给他人的人。但是终于也到了告别的时刻，继续下去也不是一个好的选择。 突然很想用完整的一天，去回忆迄今为止全部的人生12年上半年，世界末日的预言悄悄流行。班主任突然说，即便这是真实的，你们也足够幸运，进入新环境的年轻人总是欣喜，去体会半年的大学生活，也不至于有太多的遗憾。 果然，从2012年的9月开始，就全然忘却了这个预言。 为12年的迎新晚会写了主持稿和朗诵稿，在后台递话筒的我听完了全程，听到那首《温柔》的吉他弹唱，突然有种莫名的感动。 现在的我再也写不出那样的文字，而当晚弹吉他的同学，似乎晚会结束之后就再没见过。那年是第一次到这个偏僻的校区，慌忙之中迷了路，那时也没有想过将会在这里度过近十年。 12年12月某个下雨的夜晚，曾徒步从本部走到了外滩。那年跨年夜有灯光秀，用渣像素的相机拍了几张烟花，在返回的人潮中挤掉了一枚徽章。14年跨年夜在外滩想重温没有看完整的灯光秀，在桥上冻了一夜，没有表演，没有烟花，返回时只看到飞驰而过的救护车。 13年可能是人人网的巅峰，涌现了一批令人惊艳的写手，那时使用人人的频率堪比如今的朋友圈，但朋友圈从未令我印象深刻。转载的文章有些已经不在，幸存的再看仍是热泪盈眶。最后的一条状态停留在了2015年的7月。 13年充数参加了第一届上理公开赛，惨不忍睹。同年在南校区加入了毽球队，最后放弃了二工大的那次比赛。 13年选修课就已修满16学分（8学分即可毕业），之后几年由于害怕受到学校的制裁，压抑了自己不断学习新技能的欲望。 14年和我妈去看了新街口在上海的演出，穿上自己P图的T恤，新街口组合在CD上签了名。我还问了MC晗怎么瘦下来的，他激动得从舞台上跳下来说，你如果失恋了，也会马上瘦下来。 14年的樱花季收到了上一年写给自己的信，恰好在去本部的那天。每年都会经过系着五色彩带的卡片，匆匆走过却没有留下任何的愿望。总在幻想13年的自己也会出现在同样的地点，我应该走上前跟她说些什么。 14年看了最多的展览，曾对某个行为艺术家印象深刻。两个陌生女孩请我看了大陆首届失恋展（3个人的票比2个人的便宜），看过每一件展品，写了冗长的留言，从展馆出来的时候终于释怀。 15年开始实习，只能说既不能让他人满意，也不能让自己满意。平静和愉悦的过程无法真正学习到什么，只有窘迫和焦虑的心境下才能换来经验和学识。 那时看到人人上流行毕业时的一百张照片，我也曾打算在毕业时总结出一个四年间种种经历的相册，以后时常翻看也能有继续生活的勇气。不知道回忆是否是逃避的选择，本能拥有更多的快乐，却选择了一条异常艰险的道路。虽然万事万物的收获都有其代价，我也仅是企盼不虚此行。","tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"CESM模式1.2.0环境搭建指南","date":"2017-03-16T15:28:37.000Z","path":"2017/03/16/CESM模式1-2-0环境搭建指南/","text":"研究气象模式转眼已经有了一年多的时间，主攻的方向是CESM模式的性能优化，这套内容其实在2015年就已经发布在论坛上，现在仅作为一个搬运，充实个人博客的内容。 安装PGIPGI是可以运行CESM所需的编译器的一种，还可以使用ifort，PGI新版无破解，需要购买，10.6版本有破解，但没有CUDA组件123mkdir pgicd 你解压PGI安装包的目录./install 这里我的安装目录是/opt/pgi，然后配置环境变量123456vi ~/.bashrcexport PGI=/opt/pgi/linux86-64/10.6/ export MANPATH=$MANPATH:$PGI/man export LM_LICENSE_FILE=/opt/pgi/license.dat export PATH=$PATH:$PGI/bin source ./bashrc 然后检测PGI是否安装成功，输入pgf90,如果出现$pgf90-Warning-No files to process即为成功 安装zlib下载传送门123cd 解压目录./configure --prefix=/home/ed/localmake check install 如果出现了No shared library support的报错，说明需要指定编译器，可以替换成如下的命令1./configure --prefix=/home/ed/local --sharedlibdir=/opt/pgi/linux86-64/15.10/lib 安装hdf5下载传送门12345cd 解压目录./configure --with-zlib=/home/ed/local --prefix=/home/ed/localmakemake checkmake install netcdf系列安装netcdf从4.2就开始分开了,netcdf-c和netcdf-fortran一定要装在一起,并且使用同一个编译器,不然就会出现很难解决的错误 netcdf下载传送门12345cd 解压目录CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-c下载传送门1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-fortran先添加一个环境变量12export LD_LIBRARY_PATH=/home/ed/local/lib:$&#123;LD_LIBRARY_PATH&#125;source ~/.bashrc 然后进行安装1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install 注意：重新make的话，要先运行make clean 配置netcdf的环境变量 12345vi ~/.bashrcexport NETCDF=/home/ed/localexport PATH=$PATH:$NETCDF/bin:$NETCDF/include:$NETCDF/libexport MANPATH=$MANPATH:$NETCDF/share/mansource ~/.bashrc 检测netcdf是否安装成功：ncdump 安装mpich建议安装的版本是3.1.1 配置CESM打开scripts/ccsm_utils/Machines,里面有个config_machines.xml打开在后面添加，按自己目录酌情修改123456789101112131415161718&lt;machine MACH=&quot;newmach&quot;&gt; //machine name自己取的，newmach &lt;DESC&gt;os is Linux&lt;/DESC&gt; &lt;OS&gt;LINUX&lt;/OS&gt; &lt;COMPILERS&gt;pgi&lt;/COMPILERS&gt; &lt;MPILIBS&gt;mpich&lt;/MPILIBS&gt; &lt;RUNDIR&gt;/cesm/cesm1_2_0/$CASE/run&lt;/RUNDIR&gt; //自己定的 &lt;EXEROOT&gt;/cesm/cesm1_2_0/$CASE/bld&lt;/EXEROOT&gt; &lt;DIN_LOC_ROOT&gt;/cesm/cesm1_2_0/inputdata&lt;/DIN_LOC_ROOT&gt; //文件夹事先要创建 &lt;DIN_LOC_ROOT_CLMFORC&gt;/cesm/cesm1_2_0/lmwg&lt;/DIN_LOC_ROOT_CLMFORC&gt; &lt;DOUT_S_ROOT&gt;/cesm/cesm1_2_0/archive/$CASE&lt;/DOUT_S_ROOT&gt; &lt;DOUT_L_MSROOT&gt;/cesm/cesm1_2_0/$CASE&lt;/DOUT_L_MSROOT&gt; &lt;CCSM_BASELINE&gt;/cesm/cesm1_2_0/ccsm_baselines&lt;/CCSM_BASELINE&gt; &lt;CCSM_CPRNC&gt;/cesm/cesm1_2_0/tools/cprnc&lt;/CCSM_CPRNC&gt; &lt;SUPPORTED_BY&gt;srinathv -at- ucar.edu&lt;/SUPPORTED_BY&gt; &lt;GMAKE_J&gt;2&lt;/GMAKE_J&gt; //建议填1或2 &lt;MAX_TASKS_PER_NODE&gt;8&lt;/MAX_TASKS_PER_NODE&gt; &lt;PES_PER_NODE&gt;16&lt;/PES_PER_NODE&gt;&lt;/machine&gt; 然后打开config_compiler.xml打开在后面添加12345&lt;compiler MACH=&quot;newmach&quot;&gt; &lt;NETCDF_PATH&gt;/home/ed/local&lt;/NETCDF_PATH&gt; &lt;ADD_SLIBS&gt;-L/home/ed/local/lib -lnetcdf -lnetcdff&lt;/ADD_SLIBS&gt; &lt;MPI_PATH&gt;/home/ed/local/mpich&lt;/MPI_PATH&gt;&lt;/compiler&gt; 然后执行cp env_mach_specific.userdefined env_mach_specific.newmach,在后面添加123456set NETCDF_PATH = /home/ed/localset MPI_PATH = /home/ed/local/mpichsetenv INC_NETCDF $&#123;NETCDF_PATH&#125;/includesetenv LIB_NETCDF $&#123;NETCDF_PATH&#125;/libsetenv INC_MPI $&#123;MPI_PATH&#125;/includesetenv LIB_MPI $&#123;MPI_PATH&#125;/lib 然后执行cp mkbatch.userdefined mkbatch.newmach,修改按照自己机器的情况,将两句含有mpi执行命令（mpiexec和mpirun）的其中一句解除注释，就可以了 运行CESM先到models/utils/pio下1./configure 然后cd到models/utils/mct下1./configure CC=pgcc FC=pgf90 注：如果出现C编译器的相关问题，就重装PGI 到scripts目录1./create_newcase -case /cesm/cesm1_2_0/case -mach newmach -compset X -res f19_g16 然后进入case那个目录1234./cesm_setup./case.clean_build (svn :用户名：guestuser 密码：friendly)./case.build./case.run 当时摸索用了1个月的时间，希望之后的同学可以少走些弯路。","tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"MacOS + selenium + python 极速搭建","date":"2017-03-15T02:58:23.000Z","path":"2017/03/15/MacOS-selenium-python极速搭建/","text":"大四实习临离职的时候做过一周的自动化测试，用的是公司电脑里的Eclipse，导了几个jar包，用java写的一套自动化测试，比较入门，但是实现测试用例还是足够了的，如今为了小公主的面试，我决定试试MacOS的水。 不得不说，MacOS是真方便啊。 环境搭建MacOS自带了python2.7，默认安装目录是/usr/bin/python, 还需要一个文本编辑器，用sublime即可，美观高亮 安装selenium1sudo easy_install selenium 以Firefox为例，安装geckodriver驱动下载解压之后，移动到/usr/local/bin中1sudo mv ~/Downloads/geckodriver /usr/local/bin/ 如果出现了以下的问题，就是没有安装geckodriver selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH. 简单的自动化测试脚本打开sublime，键入几句简单的测试代码123456789from selenium import webdriverfrom selenium.common.exceptions import NoSuchElementExceptionfrom selenium.webdriver.common.keys import Keysimport timebrowser = webdriver.Firefox() browser.get(&quot;http://www.baidu.com&quot;) assert &quot;Hahaha&quot; in browser.titlebrowser.close() 保存成test.py，然后在命令行中运行1python test.py 如果出现了如下的错误 selenium.common.exceptions.WebDriverException: Message: Missing ‘marionetteProtocol’ field in handshake 说明Firefox的版本太老了，更新之后再运行，发现百度的页面打开，这个简单脚本就运行成功了。 有时间的时候再探究一下Chrome。","tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"第一篇个人博客的诞生","date":"2017-03-14T15:42:45.000Z","path":"2017/03/14/第一篇个人博客的诞生/","text":"大学四年转瞬而过，始终都没有时间好好地写一篇博客，在回顾过去的历程之前，记录一下这篇博客诞生的始末。 这篇博客使用了简洁轻便的Hexo平台和github的免费挂载，可能在未来某个打算花费大量精力打造博客的时刻购买一个个性化的域名。 第一篇个人博客的诞生，是一个值得纪念的时间节点，代表我终于从长时间的焦虑中逐渐缓解，学会如何分享和思考。 首先提到github，大三和大四实习期间使用github协作的时候很多，但几乎全是未曾公开的实习代码，随着离职也都被移出了协作。这两年间也几乎没写过为了兴趣为了欣赏的作品，目的性很强，但技术却没得到长足的进步。 想做很多当下比较流行的事，个人博客是其中一件。 安装环境装Nodejs是必要的，之前实习有用到，创建一个放置个人博客的文件夹，cd到文件夹下，使用如下命令安装Hexo1sudo npm install -g hexo 然后对Hexo进行初始化操作1hexo init 生成静态页面1hexo generate 启动预览1hexo server 打开http://localhost:4000就看到了Hexo的欢迎页 关联Github之前发现github.io可以挂载自定义的html页面，也有过自己编写博客模版的打算，先作为一个小目标去努力。 首先创建一个Repository，以我的个人博客为例，Repository的名字就是lolilukia.github.io 然后cd到个人博客的文件夹下，编辑_config.yml文件1vim _config.yml 按i进行插入修改操作，修改以下内容：1234567deploy: type: git repo: https://github.com/lolilukia/lolilukia.github.io.git branch: master 然后按esc退出编辑模式，连按两次大写Z保存并退出，退出后继续执行命令1npm install hexo-deployer-git --save 部署1hexo deploy 打开http://lolilukia.github.io，就可以看到Hexo的欢迎页了 使用主题这个个人博客的主题来自Litten，说实话它的设计给了我会心一击，我在寒假的时候曾经想要写一个个人博客模板，虽说细节并不相同，但侧边栏的设计惊人地相似，不得不说这个主题很有科技感，敬佩和羡慕之情油然而生。 首先将这个主题拷贝到本地，也就是个人博客目录下的主题文件夹中1git clone https://github.com/litten/hexo-theme-yilia.git /Users/apple/blog/themes/yilia 修改blog下的_config.yml1vim _config.yml 将themes后的默认landscope改为yilia 最后一步就是cd到yilia文件夹下更改配置1vim _config.yml 更改作者、友链等相关栏目，重新启动服务，就可以看到主题了。 编写博客博客的原理是将markdown文档放到source/_posts文件夹下，然后生成静态页面。 首先新建一个文章1hexo new &quot;第一篇个人博客的诞生&quot; 在source/_posts中会生成一个md文件，用编辑器打开进行编辑，然后执行如下的操作1234hexo cleanhexo generatehexo deployhexo server 打开http://localhost:4000就能看到新写的博文啦～","tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]}]