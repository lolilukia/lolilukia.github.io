[{"title":"阿里云云虚拟主机配置https","date":"2018-01-24T07:26:38.000Z","path":"2018/01/24/阿里云云虚拟主机配置https/","text":"最近开发的微信小程序后台要求使用https，为了节省成本而租用的云虚拟主机，配置https可谓大费周折，还差点因为https配置不成功，放弃了6元/年的云虚拟主机。 无法远程登录的云虚拟主机，据说只能借助CDN开半程的https，以下是具体的配置方法 准备工作首先，需要有一个在阿里云租用的云虚拟主机，并且绑定了域名。 然后购买CDN流量包（建站版） 购买证书https的高级证书很昂贵，但是为了推广https，会有基本版的免费证书，在安全（云盾）-&gt;CA证书服务（数据安全），点击购买证书 先选Symantec，然后选择1个域名，然后再选免费型DV SSL，选择立即购买。 输入域名进行基本的配置之后，就等待系统自动签发。 点击证书详情，选择云产品推送，推送CDN和负载均衡 配置域名产品与服务中选择CDN，然后选择添加域名 这里需要注意的是，一定是80端口，因为虚拟主机的443端口已被占用。 然后进入域名的配置，点击HTTPS设置的修改配置： 选择开启https之后，选择上传证书，然后公钥和私钥部分会自动填全 注意跳转类型选择HTTP-&gt;HTTPS HTTP/2我也开启了，似乎只是个优化 然后复制标题下面的CNAME 选择域名-&gt;解析 然后到了解析设置，选择添加解析 添加一条如下的解析： 其中CNAME是记录类型，www是主机记录，记录值是你刚刚复制的内容，其余均选择默认即可 等待几分钟刷新之后，就可以看到绿色的https啦～","comments":true,"tags":[{"name":"服务器","slug":"服务器","permalink":"http://lolilukia.com/tags/服务器/"}]},{"title":"微信小程序过程记录（一）","date":"2017-10-08T02:02:07.000Z","path":"2017/10/08/微信小程序过程记录/","text":"前两篇博客记录了微信小程序开发的一些准备工作，由于时间紧迫，需要前后端同时推进，这篇博客就记录其中一些比较繁杂凌乱的过程。 mysql存储中文数据想到同学的真实姓名要使用中文，理论上说mysql安装之后默认不支持中文存储，最便捷的方式当然是修改表的字符集。方法是选中表，右键选择Alter table，然后就是下图的样子，修改某些列的Collection，一般选择utf8_bin，与ci不同的是，这种字符集大小写敏感。然后点击Apply即可。 使用PHP重写作为一个命途多舛的编程绝缘体，还是没有经受住命运的拷问。在使用Python-Flask写完一个功能之后，突然想到先把服务器租起来吧，综合实用性和性价比，租了云虚拟主机。目前虚拟主机能否承受得住100人左右的并发尚不可知，但可以肯定的是虚拟主机不支持python,只能拿php重写。 于是我就使用yii2框架来实现小程序的后台，框架的搭建前文已经提到过了，在此不进行赘述。当然，虚拟主机不支持ssh远程登录，只能将vendor等文件夹一起传到根目录中。 在将后台api打包上传至虚拟主机之后，出现了以下的问题： include(/data/home/xxx/yiisoft/yii2/web/Memberer.php): failed to open stream: No such file or directory 觉得非常地诡异，解决方式如下： 1）设置全局composer命令 1mv composer.phar /usr/local/bin/composer 2）删除vendor目录，更新vendor目录 1composer install 虚拟主机删除文件错误码550更新后台代码包的时候，需要将之前的文件夹删掉，但是删除的时候出现了以下的错误： 550 Remove directory operation failed 其实是隐藏文件的问题，我使用的FTP工具是FileZilla，解决办法是选择菜单栏服务器-强制显示隐藏文件，重新连接服务器，通常要重连几遍才能删彻底。 复制新项目出现问题更新vendor目录后的项目出现了以下的错误： exception ‘yii\\base\\InvalidRouteException’ with message ‘Unable to resolve the request “site/error”.’ in /Users/yuzhiyuan/Documents/htdocs/yii-application/vendor/yiisoft/yii2/base/Module.php:461 发现好像新建项目之后把SiteController删除了，于是决定新建一个项目，现在的命令较之前有些差别，贴出来： 12345php -r \"copy('https://getcomposer.org/installer', 'composer-setup.php');\"php -r \"if (hash_file('SHA384', 'composer-setup.php') === '544e09ee996cdf60ece3804abc52599c22b1f40f4323403c44d44fdfdd586475ca9813a858088ffbc1f233e9b180f061') &#123; echo 'Installer verified'; &#125; else &#123; echo 'Installer corrupt'; unlink('composer-setup.php'); &#125; echo PHP_EOL;\"php composer-setup.phpphp -r \"unlink('composer-setup.php');\"php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-basic /Users/apple/tjyx_backend 安装好之后测试了下php yii serve –docroot=’web’ –port=8888 在浏览器中输入http://localhost:8888/index.php 出现Congratulations!就说明项目基本完整，接下来就看功能了。 发请求出现的问题测试请求返回值是否正确的时候，依然报了以下的错： exception ‘yii\\base\\InvalidRouteException’ with message ‘Unable to resolve the request “site/error”.’ in /Users/yuzhiyuan/Documents/htdocs/yii-application/vendor/yiisoft/yii2/base/Module.php:461 找到了以下解决方案，本地测试返回了正确的返回值。在每个action前面加上这样一段话： 12345public function beforeAction($action)&#123; $this-&gt;enableCsrfValidation = false; return parent::beforeAction($action);&#125; 修改权限访问index.php首页的时候，出现了如下的错误： PHP warningchmod() has been disabled for security reasons 这个原因是asset权限不足，在ftp软件上修改成777即可。","comments":true,"tags":[{"name":"微信小程序","slug":"微信小程序","permalink":"http://lolilukia.com/tags/微信小程序/"}]},{"title":"python flask连接mysql数据库","date":"2017-10-02T04:25:14.000Z","path":"2017/10/02/python-flask连接mysql数据库/","text":"flask连接mysql数据库踩了非常多的坑，后悔没有用php写后端，抛弃了熟悉的phpMyAdmin，命令行操作不熟的我选择了MySQL workbench。 MySQL Workbench 图形界面方便很多，但在刚开始建表的时候出现了这样的错误： Error 1005 “Can’t create table (errno: 13)” 害我检查了好几遍，并没有发现什么可疑的错误，后来才知道是要赋权限： 1sudo chown -R mysql:mysql /usr/local/mysql/data/my_database 其中，my_database是数据库的名称。要设计的逻辑比较简单，建表之后，就开始安装python连接mysql的驱动包。 flask_sqlalchemy选取mysql驱动包的过程可谓一波三折，有很多随着python版本升级而退出历史舞台的模块和写法，现在我python版本是2.7，为了以后能兼容3（当然我也不确定），我选用了flask_sqlalchemy。 安装这里还是用到超方便的工具pip，命令如下： 12pip install mysql-pythonpip install flask-sqlalchemy 但显然不可能这么顺遂，我在安装时报了这样的错： ld: library not found for -lsslclang: error: linker command failed with exit code 1 (use -v to see invocation)error: command ‘cc’ failed with exit status 1 我又从官网下载了源码安装包，进行编译安装，也是一样的错误。第一句好像是说openssl库找不到，我就使用brew来安装openssl。 12sudo chown -R $(whoami) /usr/localbrew install openssl 可是错误还是存在，反正我是怎么也没想到，解决方案是这样的： 1xcode-select --install 安装成功。 配置sqlalchemy12345678910111213141516171819202122232425#!flask/bin/python# -*- coding: utf-8 -*-from flask import Flaskfrom flask_sqlalchemy import SQLAlchemy app = Flask(__name__)#配置数据库驱动app.config[&apos;SQLALCHEMY_DATABASE_URI&apos;]=&apos;mysql://root:myadminsql@localhost:3306/tjyx&apos; #这里登陆的是root用户，要填上自己的密码，MySQL的默认端口是3306，填上之前创建的数据库名app.config[&apos;SQLALCHEMY_COMMIT_ON_TEARDOWN&apos;]=True #设置这一项是每次请求结束后都会自动提交数据库中的变动db = SQLAlchemy(app) #实例化#定义表名class Member(db.Model): __tablename__ = &apos;member&apos; #定义表名 Id = db.Column(db.Integer,primary_key=True)#定义列对象 name = db.Column(db.String(64)) nickname = db.Column(db.String(64)) rest_time = db.Column(db.Integer) integral = db.Column(db.Integer)#执行插入操作user = Member(name = &apos;Yanke&apos;, nickname = &apos;Tom&apos;, rest_time = 12, integral = 100)db.session.add_all([user]) # 准备把对象写入数据库之前，先要将其添加到会话中db.session.commit()#提交会话到数据库 成功插入数据库。 这一期先到这里，2小时后就开始我的国庆青岛之旅了。","comments":true,"tags":[{"name":"python mysql","slug":"python-mysql","permalink":"http://lolilukia.com/tags/python-mysql/"}]},{"title":"部署在vultr上的python flask微信小程序后台","date":"2017-09-28T06:05:17.000Z","path":"2017/09/28/部署在vultr上的python-flask微信小程序后台/","text":"最近打算给羽毛球协会写个微信小程序，希望能由此推动无纸化进程。从大一开始，亲历了这个社团非常多的变化，从刚开始固定人数，现场填写表格到后来的微信群，群里报名统计，但干事的工作还是比较繁重的，其实这也是很多社团面临的问题。 目前还处于程序开发的初级阶段，后台选用了python的flask框架，尽管php是世界上最好的语言，人生苦短，我用python。 首先面对的一个问题就是外部接口，突然想起为了科学上网搭建的vps，值得担忧的问题是vultr的ping太高，处理同时报名活动这种高并发事件可能会有问题。但是还是先把功能完成，后续成熟时再租阿里云腾讯云啥的好了。 本地环境闲话少叙，我们直接进入本地环境的搭建环节。由于我是OSX系统，自带了python 2.7，另外由于我也经常写python，所以pip也是必不可少的。 安装virtualenv下载链接 virtualenv 其中我选择的是python wheel, 安装命令如下： 1sudo -H pip install virtualenv-15.1.0-py2.py3-none-any.whl 新建项目新建项目并安装flask包 1234mkdir test_apicd test_apivirtualenv flaskflask/bin/pip install flask 回到test_api目录，新建一个初始文件app.py，是一个hello world的简单示例： 1234567891011#!flask/bin/pythonfrom flask import Flaskapp = Flask(__name__)@app.route(&apos;/&apos;)def index(): return &quot;Hello, World!&quot;if __name__ == &apos;__main__&apos;: app.run(debug=True) 然后就可以在本地看到这个api返回的hello world了： 12chmod a+x app.py./app.py 第一次使用这个框架，我的做法是在本地调试，调试完成后再部署到服务器上，可以想到服务器返回结果可能会比较慢。 服务器环境我们最终的目的还是要将上述开发好的源码部署到服务器上，我选用的是现成的vultr，预装的是centos系统（只是因为我对centos比较熟悉，但其实Ubuntu类库更多也更主流） 首先我们连接到远程服务器，搭建一下python的环境 python环境搭建下载地址：python 我这里依旧选择了python2.7，懒得在本地更新到python3，两者的写法也有很大的区别。 解压安装 123456xz -d Python.xztar -xvf Python.tarcd Python./configuremakemake install 配置环境变量 12345vi ~/.bashrc加入一行export PATH=&quot;$PATH:/usr/local/bin/python&quot;返回source ~/.bashrc 输入python,出现相关信息说明安装完毕。 安装pip和virtualenv1yum install python-pip python-virtualenv 关闭端口8080 1iptables -A INPUT -p tcp --destination-port 8080 -j DROP 和本地差不多的步骤 1234567mkdir test_apicd test_apivirtualenv flasksource flask/bin/activatecd flaskpip install gunicornpip install flask 新建文件 1vi app.py 给出vultr官网的一个例子，粘贴到app.py中： 123456from flask import Flaskapp = Flask(__name__)@app.route(&apos;/&apos;)def hello_world(): return &apos;Hello, Vultr!&apos; 生成页面，其中2代表的是服务器CPU核心数的2倍的值，我的CPU core是1，所以这里就是2，冒号前面是py文件的名称，后面永远都是app: 1gunicorn -w 2 app:app &amp; 安装nginx，nginx支持多种配置，暂时只有这一个app，因此我就修改了默认配置: 123deactivateyum install nginxvi /etc/nginx/nginx.conf 将以下的内容粘贴进location /后面的一对大括号里： 12345proxy_set_header HOST $host;proxy_set_header X-Forwarded-Proto $scheme;proxy_set_header X-Real-IP $remote_addr;proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;proxy_pass http://localhost:8000/; 检测一下nginx的语法是否正确： 1nginx -t -c /etc/nginx/nginx.conf 启动nginx: 1/usr/sbin/nginx -c /etc/nginx/nginx.conf 如修改了nginx.conf，可以重新加载： 1nginx -s reload 然后输入http:/vps的ip/就可以看到Hello Vultr的字样啦 好了，这一期先写到这里，后面有时间跟进会发布新的博客（然而应该并没有谁来看）。","comments":true,"tags":[{"name":"python mysql","slug":"python-mysql","permalink":"http://lolilukia.com/tags/python-mysql/"}]},{"title":"丧到爆炸的七月","date":"2017-07-13T07:50:31.000Z","path":"2017/07/13/丧到爆炸的七月/","text":"上海的炎夏终究还是猝不及防地到来了，没有去年的兵荒马乱，安静得让人觉得孤独。只是现在没办法感受那时的忧虑，日子习惯得让人麻木。 已经记不得有多少这样的时刻，对所有事物都失去了兴趣，明明有很多可以去做的事，却一直无法开始行动。比如一直想写的这篇博客，到7月底才真正完成。年纪大了也经常会失眠，没有迫不及待要去完成的事，也没有时间追赶的紧迫感，期待着一次次的放假开学，却每次都有理由让自己陷入片刻的欢愉之中。明知道以自己目前的能力，几乎不可能会比本科毕业时有好太多的发展，但还是日复一日地逃避现实，享受短暂的闲适。 人生根本没有太容易的事情，生活总是在似乎顺利的时刻埋下绊子。没有意外之喜，没有成竹在胸，只有毫无悬念的挫败。如果生活总是多种面孔，那么呈现给我的一定是最严厉的那面。然而荒谬的是，尽管要我失落绝望，却总在最后时刻给我一丝生机。 这一年尝试了很多事物，投了一篇论文，有了自己的博客、开了淘宝店，正在写一个兴趣使然的全端网站等等，然而每件事都不如想象中那般顺遂。 我固然明白长久的美好生活没有那么容易获得，太过顺利的时候也会下意识地产生担忧。越是年少的时候，越不懂让自己的人生变得充盈，所以只能在毫无情怀急躁冒进的年纪去拼命追赶。 生存、发展、生活都是至关重要的议题，一切以生存为基本，做“无用之事”的兴趣渐渐变得寡淡，在他人眼中的我，就变成了目的性极强的世俗机器，我无从争辩。想成为一个有趣的人，但在此之前，我应是一个独立自主的人。倘若我抛开现实中的种种，去粉饰我外表的光鲜，没有人会为我的潇洒而买单，那些亮丽充其量不过是转瞬之间消失的风景。 这个夏天没有什么特别的期待，坚持真实，崇尚自由。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"科学上网黑喂够","date":"2017-07-03T02:24:32.000Z","path":"2017/07/03/科学上网黑喂够/","text":"一直在探索如何科学上网，经历了红杏、时空隧道、小狐狸的充年跑之后，决心开辟一条长期有效极速舒心的科学道路。妈妈再也不用担心买裙裙的小钱钱扔进黄浦江了，服务更是比从前优秀了太多。闲话不多说，迅速开始我们的探索之旅。 租用vpsVultr是提供日本、美国、欧洲等多个国家地区机房的vps主机商，是目前市面上性价比较高的，最低档的带宽日常使用应该能结余不少，同时在线的可有3-5人，平摊到一人的费用大概7-12软妹币每月。 Vultr的资费基本如图所示：实测2.5美刀的套餐已经停售，满送的活动也截止上半年，果然绝缘体的生涯就是这么坎坷。不管怎样，还是尽快上车。Vultr不支持宝宝付款，不过注册个Paypal还是分分钟的事，so easy。 部署vps注册Vultr之后，点击servers的蓝色加号，进入配置页面，前面两个配置建议如下，东京的速度比较快。 选资费的时候，我们看到2.5美刀的已经停售了，5美刀的3，5个小伙伴使用还是很稳的，当然还有其他资费可以选择。 最后一项设置你vps的名字 其他的都不用设置，然后直接点击部署 连接vps点击查看你刚部署的vps 借助一些连接远程服务器的软件比如xshell就可以访问你刚刚部署的vps,当然使用mac OSX的小伙伴可以直接用终端。 输入yes和密码，回车 如果有需要的话，可以配置免密登陆，首先输入命令 1ssh-keygen 路径选择默认，key fingerprint直接回车，然后对ssh配置文件(/etc/ssh/sshd_config)进行修改，将以下几行取消注释 123RSAAuthentication yesPubkeyAuthentication yesAuthorizedKeysFile .ssh/authorized_keys 然后将我们个人计算中的密钥拷贝到服务器上 1cat ~/.ssh/id_rsa.pub | ssh user@host \"cat - &gt;&gt; ~/.ssh/authorized_keys\" 进行重启 1service sshd restart 然后我们就可以使用ssh root@ip来进行直接登陆了。 Shadowsocks需要同时在vps和你的pc上安装部署shadowsocks，首先在vps的centos 7上安装shadowsocks。 wget –no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.shchmod +x shadowsocks.sh./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log 这是一个一键安装脚本，使用详情 然后会提示你输入密码和端口，我们可以根据端口来分配用户，输入密码和端口之后，就出现了如下的信息 安装客户端shadowsocks 设置服务器设定 设置多用户如果想添加用户，修改vps上的json文件即可，输入以下的命令 cd /etcvi shadowsocks.json 我这里的文件的内容如下： 22345就是新添加的用户，设置一个独立的密码，就是在shadowsocks客户端配置的时候输入的。按i进入编辑模式，按esc退出编辑，再按两下大写z退出该文件，然后重启shadowsocks服务器端。 /etc/init.d/shadowsocks restart VPS加速——TCP-BBR拥堵算法TCP-BBR是谷歌推出的用来替代收费锐速的单边加速TCP连接效果的开源算法，主要思想是跑满带宽，且避免排队。 以下是CentOS7的执行步骤 更换内核123rpm --import https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgrpm -Uvh http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmyum --enablerepo=elrepo-kernel install kernel-ml -y 查看内核是否安装成功1rpm -qa | grep kernel 更新grub系统引导文件并重启123egrep ^menuentry /etc/grub2.cfg | cut -f 2 -d \\'grub2-set-default 0 #default 0表示第一个内核设置为默认运行, 选择最新内核就对了reboot 执行一键安装脚本123wget --no-check-certificate https://github.com/iyuco/scripts/raw/master/bbr.shchmod +x bbr.sh./bbr.sh 提示重启，重启后登入VPS，验证内核是否安装成功 1uname -r 检测是否生效 1sysctl net.ipv4.tcp_available_congestion_control 返回值若为：net.ipv4.tcp_available_congestion_control = bbr cubic reno 即可 1sysctl net.ipv4.tcp_congestion_control 返回值若为：net.ipv4.tcp_congestion_control = bbr 即可 1sysctl net.core.default_qdisc 返回值若为：net.core.default_qdisc = fq 即可 1lsmod | grep bbr 返回值有 tcp_bbr 模块即说明bbr已启动 最后一步，非常关键，如果你vps可以ssh登陆，却无法打开谷歌，有可能是因为没有关防火墙 1systemctl stop firewalld.service 稳如狗开始我们的科学上网之旅吧","comments":true,"tags":[{"name":"shadowsocks","slug":"shadowsocks","permalink":"http://lolilukia.com/tags/shadowsocks/"}]},{"title":"Mac OSX下phpMyAdmin安装配置","date":"2017-05-07T06:26:31.000Z","path":"2017/05/07/Mac-OSX下phpMyAdmin安装配置/","text":"phpMyAdmin为了连接mysql数据库和php代码，我使用了phpMyAdmin，对于一个初出茅庐的新手来说，phpMyAdmin的安装配置稍显复杂，参考了网上一些博客，终于能够正常使用。 下载地址phpMyAdmin下载地址 安装配置由于phpMyAdmin的运行需要借助Apache，因此我们需要将压缩包解压到Apache的服务器根目录下，在OSX系统中，这个位置是/Library/WebServer/Documents，点击Finder的前往文件夹就可以访问除此之外，我们需要修改一下Apache中的配置文件，用同样的方法进入/etc/apache2/中，打开httpd.conf，找到这句 DirectoryIndex index.html 在后面加上index.php再加上一句1SetHandler application/x-httpd-php 接下来打开phpMyAdmin文件夹中的libraries里的config.default.php,进行如下的修改：1$cfg[&apos;PmaAbsoluteUri&apos;] = &apos;http://localhost/phpmyadmin/&apos;; 这句话是你在浏览器中键入访问phpmyadmin的地址1$cfg[&apos;blowfish_secret&apos;] = &apos;xxxxxx&apos;; 这句话是一个类似身份验证的东西，一定要填，不然会报错1$cfg[&apos;Servers&apos;][$i][&apos;host&apos;] = &apos;127.0.0.1&apos;; 你数据库的密码12$cfg[&apos;Servers&apos;][$i][&apos;password&apos;] = &apos;xxxxxx&apos;;$cfg[&apos;Servers&apos;][$i][&apos;hide_db&apos;] = &apos;information_schema&apos;; 需要修改的部分就到这里，然后拷贝一份到phpmyadmin下面，名称改为config.inc.php 问题回顾在浏览器中输入http://localhost/phpmyadmin应该就能显示phpMyAdmin的登录页面了，但是在登录过程中，可能会出现这样的错误： 1862, Your password has expired. To log in you must change it using a client that supports expired passwords. 这说明mysql的密码过期了，这种情况一般发生在刚安装mysql之后，使用初始密码登录的情况，那么我们就需要修改mysql的密码：终端输入： 1cd /usr/local/mysql/bin/ 然后使用管理员权限登录1sudo su 登录mysql1mysql -u root -p 输入原始密码，然后修改密码： SET PASSWORD = PASSWORD(&apos;xxxxxxxxx&apos;);","comments":true,"tags":[{"name":"php","slug":"php","permalink":"http://lolilukia.com/tags/php/"}]},{"title":"第一个yii2应用","date":"2017-04-17T16:21:38.000Z","path":"2017/04/18/第一个yii2应用/","text":"最近在做一个网站，打算用vue写前端，用yii2写后端，vue的安装过程比较顺利，记录一下Mac OSX搭建yii2框架的过程。 安装ComposerComposer下载地址或者键入以下命令1234php -r &quot;copy(&apos;https://getcomposer.org/installer&apos;, &apos;composer-setup.php&apos;);&quot;php -r &quot;if (hash_file(&apos;SHA384&apos;, &apos;composer-setup.php&apos;) === &apos;669656bab3166a7aff8a7506b8cb2d1c292f042046c5a994c43155c0be6190fa0355160742ab2e1c88d40d5be660b410&apos;) &#123; echo &apos;Installer verified&apos;; &#125; else &#123; echo &apos;Installer corrupt&apos;; unlink(&apos;composer-setup.php&apos;); &#125; echo PHP_EOL;&quot;php composer-setup.phpphp -r &quot;unlink(&apos;composer-setup.php&apos;);&quot; 创建应用模版我安装的是高级应用模版1php composer.phar create-project --prefer-dist --stability=dev yiisoft/yii2-app-advanced /Users/lolilukia/test 初始化在初始化之前，我就想运行，结果出现了如下的错误 Could not open input file: yii 需要初始化一下应用1sudo php init 发现需要一个Token, Token是从github上获取的Token生成地址 运行运行这里费了很多周折，首先，输入指令1php yii serve 发现出现了如下的报错 Document root “/Users/lolilukia/test/console/web” does not exist 一看确实没有，但是我们的主页分明是frontend/web里的index.php啊输入以下指令1php yii serve --docroot = &quot;frontend/web&quot; 发现出现了如下的错误 Document root “1” does not exist 这个问题非常的诡异，经过思考，我把指令改成了这样1php yii serve --docroot=&apos;frontend/web&apos; 非常优秀，终于出现了http://localhost:8080 is token by another process的字样，默认端口是8080，可我的vue应用占用了8080端口，于是又改了个参数：1php yii serve --docroot=&apos;frontend/web&apos; --port=8888 终于成功啦！当然我是为了做后端项目，后端的运行地址是’backend/web’，看来以后也可以尝试用它来做全站项目。","comments":true,"tags":[{"name":"php","slug":"php","permalink":"http://lolilukia.com/tags/php/"}]},{"title":"Linux实用指令记录","date":"2017-04-15T06:46:19.000Z","path":"2017/04/15/Linux实用指令记录/","text":"关闭SELinux12vi /etc/sysconfig/selinuxSELinux=disabled 解压12tar -zxvf xxx.tar.gzunzip xxx.zip 安装工具1yum -y install xxx 重新启动12rebootshutdown -r now vim的使用1234vi xxx //编辑xxx文件按i进入insert模式再按Esc退出，连续按两次大写Z退出vim输入/xxx，在文中查找xxx 开启CUDA1nvidia-xconfig -query-gpu-info 设置权限12chmod a+x xxxchmod -R 777 xxx //传递给子文件夹 修改hostname1vi /etc/hostname 输出当前路径1pwd 安装dukto123cd /etc/yum.repos.d/wget http://download.opensuse.org/repositories/home:colomboem/CentOS_7/home:colomboem.repoyum install dukto 传输文件夹1scp -r /docu/ root@node2: /opt 修改文件（夹）名1mv 修改前文件（夹）名 修改后文件（夹）名 删除文件（夹）1rm -rf 文件夹名 进入图形界面1startx 挂载移动硬盘1234567安装ntfs-3g（去官网下载）cd /mntmkdir ddjfdisk -l 看移动硬盘的磁盘名称mount -t ntfs-3g /dev/sdc /mnt/ddjmountdf -H 查看是否成功挂载 查找含某个关键字的文件1grep -r &quot;xxx&quot; /xxx/xxx（目录） 修改日期1date -s 2016-xx-xx 修改一个文件夹下所有文件的时间1touch -d 2016-xx-xx xx(文件夹路径）","comments":true,"tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"Centos集群搭建","date":"2017-04-04T09:16:04.000Z","path":"2017/04/04/Centos集群搭建/","text":"关闭防火墙和SELinux123#systemctl disable firewalld#systemctl stop firewalldvi /etc/sysconfig/selinux 确保SELINUX=disabled 然后执行1setenforce或reboot 设置防火墙规则12firewall-cmd --permanent --add-service=high-availabilityfirewall-cmd --add-service=high-availability 主机名解析 修改主机名 12345vi /etc/hostnamenode1systemctl restart network.servicehostnamenode1 验证是否为node1 配置主机表 123vi /etc/hosts192.168.xx.xx node1192.168.xx.xx node2 配置无密访问123ssh-keygen -t rsascp /root/.ssh/id_rsa.pub root@node2:/root/.ssh/authorized_keysssh node2 date //测试","comments":true,"tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"linux系统安装问题集锦","date":"2017-03-28T07:22:32.000Z","path":"2017/03/28/linux系统安装问题集锦/","text":"Centos/win双系统win10引导丢失1vi /boot/grub2/grub.cfg 加入1234567###BEGIN /etc/grub.d/40_custom###menuentry &quot;windows10&quot;&#123; insmod part_msdos insmod ntfs set root = &apos;(hd0, msdos1)&apos; chainloader+1&#125; 安装系统时出现UEFI问题分区时将/boot/efi添加进去 系统启动时出现dracut-initqueue问题 warning: /dev/root does not exist12dracut:/# cd /devdracut:/dev #ls 将启动项改为1hd: /dev/sdb4 xxxx quiet 系统安装时将引导程序装在了U盘上用U盘启动，在终端中输入12$sudo grubgrub&gt; find /boot/grub/stage1 然后记录下打印的结果修改menulist文件，将记录下的结果放在root的后面 使用ssh-add出现Could not open a connection12ssh-agent bash --login -issh-add ~/.ssh/id_rsa 使用yum安装出现Another app is currently holding the yumlock1rm -f /var/run/yum.pid Can’t locate Switch.pm in @INC1yum install perl-Switch Host key verification failed1ssh-keygen -R xxx(要连接的服务器IP)","comments":true,"tags":[{"name":"linux","slug":"linux","permalink":"http://lolilukia.com/tags/linux/"}]},{"title":"Hexo博客添加404页面和百度统计","date":"2017-03-23T15:23:49.000Z","path":"2017/03/23/Hexo博客添加404页面和百度统计/","text":"最近几天一直在下实验数据，实验暂且搁置，用了些时间在改造个人博客上。添加404页面和百度统计，工作量不大，但是非常实用。 添加404页面我使用的是腾讯公益404页面，主要是宣传寻找走失儿童的，借博客的力量让更多人看到，当然自定义404页面也是差不多的道理首先在source文件夹下，创建一个404.html文件 腾讯公益40412345678910111213141516&lt;html&gt;&lt;head&gt; &lt;meta http-equiv=&quot;content-type&quot; content=&quot;text/html;charset=utf-8;&quot;/&gt; &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge,chrome=1&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;all&quot; /&gt; &lt;meta name=&quot;robots&quot; content=&quot;index,follow&quot;/&gt;&lt;/head&gt;&lt;body&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;https://www.qq.com/404/search_children.js&quot; charset=&quot;utf-8&quot; homePageUrl=&quot;http://lolilukia.com&quot; homePageName=&quot;Back to homepage&quot;&gt;&lt;/script&gt;&lt;/body&gt;&lt;/html&gt; 在博客的_config.yml文件中标记防止被主题渲染1skip_render: 404.html 百度统计我用的主题是Litten的yilia，在themes/yilia的_config.yml文件中，将百度统计属性开启1baidu_analytics: true 然后注册百度统计账号，获取代码插入博客代码中，并检测安装，代码格式如下：123456789&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt; 打开themes/yilia/layout/_partial/baidu-analytics.ejs，插入如下格式的代码1234567891011&lt;% if (theme.baidu_analytics)&#123; %&gt;&lt;script&gt;var _hmt = _hmt || [];(function() &#123; var hm = document.createElement(&quot;script&quot;); hm.src = &quot;https://hm.baidu.com/hm.js?7fc459dce0444dbf817d4fe8513d7dff&quot;; var s = document.getElementsByTagName(&quot;script&quot;)[0]; s.parentNode.insertBefore(hm, s);&#125;)();&lt;/script&gt;&lt;% &#125; %&gt; 打开同目录下的head.ejs，插入1&lt;%- partial(&apos;baidu_tongji&apos;) %&gt; 然后clean,generate,deploy，经过20分钟之后，打开管理中心就可以看到统计结果了","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]},{"title":"重忆来时路","date":"2017-03-19T07:06:52.000Z","path":"2017/03/19/重忆来时路/","text":"这个学期，终于几乎从社团生涯中隐退。可能别人无法理解这是一种怎样的状态，我在本科毕业之际写过一篇有关社团经历的文章来纪念那些日子。曾有人问我读博的目的，其实我也并不是有多么大梦想和抱负的人，但应该没有人会相信，能够继续混迹于社团活动之中，成为其中一个重要的原因。融入那些有着共同兴趣，有相同生活风格的人群中，享受欢愉的片刻，让我感到一丝宁静。虽然他们都是学生中的普通人，平日上课，考试周在图书馆做题看书，也有焦虑无奈。但是你怎知他未曾在大型舞台上演出，怎知他不是日麻高手，怎知他不是知名公众号的运营者，怎知他是否在球场上一人骁勇善战敌得过千军万马。在这个全新的圈子里，有幸看到每个人闪光甚至可以称之为传奇的一面。大学本科的四年中，我遇到诸多这样身怀绝技的人。可以说，我究其一生，想要达到的期望也不过如此。想再学更多的技能，想要见识更多能让生活变得美好的方式，想要遇见更多愿意将这份快乐传递给他人的人。但是终于也到了告别的时刻，继续下去也不是一个好的选择。 突然很想用完整的一天，去回忆迄今为止全部的人生12年上半年，世界末日的预言悄悄流行。班主任突然说，即便这是真实的，你们也足够幸运，进入新环境的年轻人总是欣喜，去体会半年的大学生活，也不至于有太多的遗憾。 果然，从2012年的9月开始，就全然忘却了这个预言。 为12年的迎新晚会写了主持稿和朗诵稿，在后台递话筒的我听完了全程，听到那首《温柔》的吉他弹唱，突然有种莫名的感动。 现在的我再也写不出那样的文字，而当晚弹吉他的同学，似乎晚会结束之后就再没见过。那年是第一次到这个偏僻的校区，慌忙之中迷了路，那时也没有想过将会在这里度过近十年。 12年12月某个下雨的夜晚，曾徒步从本部走到了外滩。那年跨年夜有灯光秀，用渣像素的相机拍了几张烟花，在返回的人潮中挤掉了一枚徽章。14年跨年夜在外滩想重温没有看完整的灯光秀，在桥上冻了一夜，没有表演，没有烟花，返回时只看到飞驰而过的救护车。 13年可能是人人网的巅峰，涌现了一批令人惊艳的写手，那时使用人人的频率堪比如今的朋友圈，但朋友圈从未令我印象深刻。转载的文章有些已经不在，幸存的再看仍是热泪盈眶。最后的一条状态停留在了2015年的7月。 13年充数参加了第一届上理公开赛，惨不忍睹。同年在南校区加入了毽球队，最后放弃了二工大的那次比赛。 13年选修课就已修满16学分（8学分即可毕业），之后几年由于害怕受到学校的制裁，压抑了自己不断学习新技能的欲望。 14年和我妈去看了新街口在上海的演出，穿上自己P图的T恤，新街口组合在CD上签了名。我还问了MC晗怎么瘦下来的，他激动得从舞台上跳下来说，你如果失恋了，也会马上瘦下来。 14年的樱花季收到了上一年写给自己的信，恰好在去本部的那天。每年都会经过系着五色彩带的卡片，匆匆走过却没有留下任何的愿望。总在幻想13年的自己也会出现在同样的地点，我应该走上前跟她说些什么。 14年看了最多的展览，曾对某个行为艺术家印象深刻。两个陌生女孩请我看了大陆首届失恋展（3个人的票比2个人的便宜），看过每一件展品，写了冗长的留言，从展馆出来的时候终于释怀。 15年开始实习，只能说既不能让他人满意，也不能让自己满意。平静和愉悦的过程无法真正学习到什么，只有窘迫和焦虑的心境下才能换来经验和学识。 那时看到人人上流行毕业时的一百张照片，我也曾打算在毕业时总结出一个四年间种种经历的相册，以后时常翻看也能有继续生活的勇气。不知道回忆是否是逃避的选择，本能拥有更多的快乐，却选择了一条异常艰险的道路。虽然万事万物的收获都有其代价，我也仅是企盼不虚此行。","comments":true,"tags":[{"name":"生活","slug":"生活","permalink":"http://lolilukia.com/tags/生活/"}]},{"title":"CESM模式1.2.0环境搭建指南","date":"2017-03-16T15:28:37.000Z","path":"2017/03/16/CESM模式1-2-0环境搭建指南/","text":"研究气象模式转眼已经有了一年多的时间，主攻的方向是CESM模式的性能优化，这套内容其实在2015年就已经发布在论坛上，现在仅作为一个搬运，充实个人博客的内容。 安装PGIPGI是可以运行CESM所需的编译器的一种，还可以使用ifort，PGI新版无破解，需要购买，10.6版本有破解，但没有CUDA组件123mkdir pgicd 你解压PGI安装包的目录./install 这里我的安装目录是/opt/pgi，然后配置环境变量123456vi ~/.bashrcexport PGI=/opt/pgi/linux86-64/10.6/ export MANPATH=$MANPATH:$PGI/man export LM_LICENSE_FILE=/opt/pgi/license.dat export PATH=$PATH:$PGI/bin source ./bashrc 然后检测PGI是否安装成功，输入pgf90,如果出现$pgf90-Warning-No files to process即为成功 安装zlib下载传送门123cd 解压目录./configure --prefix=/home/ed/localmake check install 如果出现了No shared library support的报错，说明需要指定编译器，可以替换成如下的命令1./configure --prefix=/home/ed/local --sharedlibdir=/opt/pgi/linux86-64/15.10/lib 安装hdf5下载传送门12345cd 解压目录./configure --with-zlib=/home/ed/local --prefix=/home/ed/localmakemake checkmake install netcdf系列安装netcdf从4.2就开始分开了,netcdf-c和netcdf-fortran一定要装在一起,并且使用同一个编译器,不然就会出现很难解决的错误 netcdf下载传送门12345cd 解压目录CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-c下载传送门1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-fortran先添加一个环境变量12export LD_LIBRARY_PATH=/home/ed/local/lib:$&#123;LD_LIBRARY_PATH&#125;source ~/.bashrc 然后进行安装1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install 注意：重新make的话，要先运行make clean 配置netcdf的环境变量 12345vi ~/.bashrcexport NETCDF=/home/ed/localexport PATH=$PATH:$NETCDF/bin:$NETCDF/include:$NETCDF/libexport MANPATH=$MANPATH:$NETCDF/share/mansource ~/.bashrc 检测netcdf是否安装成功：ncdump 安装mpich建议安装的版本是3.1.1 配置CESM打开scripts/ccsm_utils/Machines,里面有个config_machines.xml打开在后面添加，按自己目录酌情修改123456789101112131415161718&lt;machine MACH=&quot;newmach&quot;&gt; //machine name自己取的，newmach &lt;DESC&gt;os is Linux&lt;/DESC&gt; &lt;OS&gt;LINUX&lt;/OS&gt; &lt;COMPILERS&gt;pgi&lt;/COMPILERS&gt; &lt;MPILIBS&gt;mpich&lt;/MPILIBS&gt; &lt;RUNDIR&gt;/cesm/cesm1_2_0/$CASE/run&lt;/RUNDIR&gt; //自己定的 &lt;EXEROOT&gt;/cesm/cesm1_2_0/$CASE/bld&lt;/EXEROOT&gt; &lt;DIN_LOC_ROOT&gt;/cesm/cesm1_2_0/inputdata&lt;/DIN_LOC_ROOT&gt; //文件夹事先要创建 &lt;DIN_LOC_ROOT_CLMFORC&gt;/cesm/cesm1_2_0/lmwg&lt;/DIN_LOC_ROOT_CLMFORC&gt; &lt;DOUT_S_ROOT&gt;/cesm/cesm1_2_0/archive/$CASE&lt;/DOUT_S_ROOT&gt; &lt;DOUT_L_MSROOT&gt;/cesm/cesm1_2_0/$CASE&lt;/DOUT_L_MSROOT&gt; &lt;CCSM_BASELINE&gt;/cesm/cesm1_2_0/ccsm_baselines&lt;/CCSM_BASELINE&gt; &lt;CCSM_CPRNC&gt;/cesm/cesm1_2_0/tools/cprnc&lt;/CCSM_CPRNC&gt; &lt;SUPPORTED_BY&gt;srinathv -at- ucar.edu&lt;/SUPPORTED_BY&gt; &lt;GMAKE_J&gt;2&lt;/GMAKE_J&gt; //建议填1或2 &lt;MAX_TASKS_PER_NODE&gt;8&lt;/MAX_TASKS_PER_NODE&gt; &lt;PES_PER_NODE&gt;16&lt;/PES_PER_NODE&gt;&lt;/machine&gt; 然后打开config_compiler.xml打开在后面添加12345&lt;compiler MACH=&quot;newmach&quot;&gt; &lt;NETCDF_PATH&gt;/home/ed/local&lt;/NETCDF_PATH&gt; &lt;ADD_SLIBS&gt;-L/home/ed/local/lib -lnetcdf -lnetcdff&lt;/ADD_SLIBS&gt; &lt;MPI_PATH&gt;/home/ed/local/mpich&lt;/MPI_PATH&gt;&lt;/compiler&gt; 然后执行cp env_mach_specific.userdefined env_mach_specific.newmach,在后面添加123456set NETCDF_PATH = /home/ed/localset MPI_PATH = /home/ed/local/mpichsetenv INC_NETCDF $&#123;NETCDF_PATH&#125;/includesetenv LIB_NETCDF $&#123;NETCDF_PATH&#125;/libsetenv INC_MPI $&#123;MPI_PATH&#125;/includesetenv LIB_MPI $&#123;MPI_PATH&#125;/lib 然后执行cp mkbatch.userdefined mkbatch.newmach,修改按照自己机器的情况,将两句含有mpi执行命令（mpiexec和mpirun）的其中一句解除注释，就可以了 运行CESM先到models/utils/pio下1./configure 然后cd到models/utils/mct下1./configure CC=pgcc FC=pgf90 注：如果出现C编译器的相关问题，就重装PGI 到scripts目录1./create_newcase -case /cesm/cesm1_2_0/case -mach newmach -compset X -res f19_g16 然后进入case那个目录1234./cesm_setup./case.clean_build (svn :用户名：guestuser 密码：friendly)./case.build./case.run 当时摸索用了1个月的时间，希望之后的同学可以少走些弯路。","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"MacOS + selenium + python 极速搭建","date":"2017-03-15T02:58:23.000Z","path":"2017/03/15/MacOS-selenium-python极速搭建/","text":"大四实习临离职的时候做过一周的自动化测试，用的是公司电脑里的Eclipse，导了几个jar包，用java写的一套自动化测试，比较入门，但是实现测试用例还是足够了的，如今为了小公主的面试，我决定试试MacOS的水。 不得不说，MacOS是真方便啊。 环境搭建MacOS自带了python2.7，默认安装目录是/usr/bin/python, 还需要一个文本编辑器，用sublime即可，美观高亮 安装selenium1sudo easy_install selenium 以Firefox为例，安装geckodriver驱动下载解压之后，移动到/usr/local/bin中1sudo mv ~/Downloads/geckodriver /usr/local/bin/ 如果出现了以下的问题，就是没有安装geckodriver selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH. 简单的自动化测试脚本打开sublime，键入几句简单的测试代码123456789from selenium import webdriverfrom selenium.common.exceptions import NoSuchElementExceptionfrom selenium.webdriver.common.keys import Keysimport timebrowser = webdriver.Firefox() browser.get(&quot;http://www.baidu.com&quot;) assert &quot;Hahaha&quot; in browser.titlebrowser.close() 保存成test.py，然后在命令行中运行1python test.py 如果出现了如下的错误 selenium.common.exceptions.WebDriverException: Message: Missing ‘marionetteProtocol’ field in handshake 说明Firefox的版本太老了，更新之后再运行，发现百度的页面打开，这个简单脚本就运行成功了。 有时间的时候再探究一下Chrome。 一个稍显复杂的例子功能简介这个脚本的作用是从豆瓣某个小组里面搜索包含‘上海’关键词的帖子，然后一分钟一刷新浏览器，出现新帖子就给目标邮箱发邮件，邮件正文内容就是帖子的链接。 脚本地址douban_script","comments":true,"tags":[{"name":"技术","slug":"技术","permalink":"http://lolilukia.com/tags/技术/"}]},{"title":"第一篇个人博客的诞生","date":"2017-03-14T15:42:45.000Z","path":"2017/03/14/第一篇个人博客的诞生/","text":"大学四年转瞬而过，始终都没有时间好好地写一篇博客，在回顾过去的历程之前，记录一下这篇博客诞生的始末。 这篇博客使用了简洁轻便的Hexo平台和github的免费挂载，可能在未来某个打算花费大量精力打造博客的时刻购买一个个性化的域名。 第一篇个人博客的诞生，是一个值得纪念的时间节点，代表我终于从长时间的焦虑中逐渐缓解，学会如何分享和思考。 首先提到github，大三和大四实习期间使用github协作的时候很多，但几乎全是未曾公开的实习代码，随着离职也都被移出了协作。这两年间也几乎没写过为了兴趣为了欣赏的作品，目的性很强，但技术却没得到长足的进步。 想做很多当下比较流行的事，个人博客是其中一件。 安装环境装Nodejs是必要的，之前实习有用到，创建一个放置个人博客的文件夹，cd到文件夹下，使用如下命令安装Hexo1sudo npm install -g hexo 然后对Hexo进行初始化操作1hexo init 生成静态页面1hexo generate 启动预览1hexo server 打开http://localhost:4000就看到了Hexo的欢迎页 关联Github之前发现github.io可以挂载自定义的html页面，也有过自己编写博客模版的打算，先作为一个小目标去努力。 首先创建一个Repository，以我的个人博客为例，Repository的名字就是lolilukia.github.io 然后cd到个人博客的文件夹下，编辑_config.yml文件1vim _config.yml 按i进行插入修改操作，修改以下内容：1234567deploy: type: git repo: https://github.com/lolilukia/lolilukia.github.io.git branch: master 然后按esc退出编辑模式，连按两次大写Z保存并退出，退出后继续执行命令1npm install hexo-deployer-git --save 部署1hexo deploy 打开http://lolilukia.github.io，就可以看到Hexo的欢迎页了 使用主题这个个人博客的主题来自Litten，说实话它的设计给了我会心一击，我在寒假的时候曾经想要写一个个人博客模板，虽说细节并不相同，但侧边栏的设计惊人地相似，不得不说这个主题很有科技感，敬佩和羡慕之情油然而生。 首先将这个主题拷贝到本地，也就是个人博客目录下的主题文件夹中1git clone https://github.com/litten/hexo-theme-yilia.git /Users/apple/blog/themes/yilia 修改blog下的_config.yml1vim _config.yml 将themes后的默认landscope改为yilia 最后一步就是cd到yilia文件夹下更改配置1vim _config.yml 更改作者、友链等相关栏目，重新启动服务，就可以看到主题了。 编写博客博客的原理是将markdown文档放到source/_posts文件夹下，然后生成静态页面。 首先新建一个文章1hexo new &quot;第一篇个人博客的诞生&quot; 在source/_posts中会生成一个md文件，用编辑器打开进行编辑，然后执行如下的操作1234hexo cleanhexo generatehexo deployhexo server 打开http://localhost:4000就能看到新写的博文啦～","comments":true,"tags":[{"name":"博客","slug":"博客","permalink":"http://lolilukia.com/tags/博客/"}]}]