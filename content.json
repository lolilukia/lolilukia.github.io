[{"title":"CESM模式1.2.0环境搭建指南","date":"2017-03-16T15:28:37.000Z","path":"2017/03/16/CESM模式1-2-0环境搭建指南/","text":"研究气象模式转眼已经有了一年多的时间，主攻的方向是CESM模式的性能优化，这套内容其实在2015年就已经发布在论坛上，现在仅作为一个搬运，充实个人博客的内容。 安装PGIPGI是可以运行CESM所需的编译器的一种，还可以使用ifort，PGI新版无破解，需要购买，10.6版本有破解，但没有CUDA组件。123mkdir pgicd 你解压PGI安装包的目录./install 这里我的安装目录是/opt/pgi，然后配置环境变量123456vi ~/.bashrcexport PGI=/opt/pgi/linux86-64/10.6/ export MANPATH=$MANPATH:$PGI/man export LM_LICENSE_FILE=/opt/pgi/license.dat export PATH=$PATH:$PGI/bin source ./bashrc 然后检测PGI是否安装成功，输入pgf90,如果出现$pgf90-Warning-No files to process即为成功 安装zlib下载传送门123cd 解压目录./configure --prefix=/home/ed/localmake check install 如果出现了No shared library support的报错，说明需要指定编译器，可以替换成如下的命令1./configure --prefix=/home/ed/local --sharedlibdir=/opt/pgi/linux86-64/15.10/lib 安装hdf5[下载传送门](http://download.csdn.net/detail/u011510965/9335833）12345cd 解压目录./configure --with-zlib=/home/ed/local --prefix=/home/ed/localmakemake checkmake install netcdf系列安装netcdf从4.2就开始分开了,netcdf-c和netcdf-fortran一定要装在一起,并且使用同一个编译器,不然就会出现很难解决的错误 netcdf下载传送门12345cd 解压目录CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-c下载传送门1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install netcdf-fortran先添加一个环境变量12export LD_LIBRARY_PATH=/home/ed/local/lib:$&#123;LD_LIBRARY_PATH&#125;source ~/.bashrc 然后进行安装1234CPPFLAGS=-I/home/ed/local/include LDFLAGS=-L/home/ed/local/lib ./configure --prefix=/home/ed/local CC=pgcc FC=pgf90makemake checkmake install 注意：重新make的话，要先运行make clean配置netcdf的环境变量 12345vi ~/.bashrcexport NETCDF=/home/ed/localexport PATH=$PATH:$NETCDF/bin:$NETCDF/include:$NETCDF/libexport MANPATH=$MANPATH:$NETCDF/share/mansource ~/.bashrc 检测netcdf是否安装成功：ncdump 安装mpich建议安装的版本是3.1.1 配置CESM打开scripts/ccsm_utils/Machines,里面有个config_machines.xml打开在后面添加，按自己目录酌情修改123456789101112131415161718&lt;machine MACH=&quot;newmach&quot;&gt; //machine name自己取的，newmach &lt;DESC&gt;os is Linux&lt;/DESC&gt; &lt;OS&gt;LINUX&lt;/OS&gt; &lt;COMPILERS&gt;pgi&lt;/COMPILERS&gt; &lt;MPILIBS&gt;mpich&lt;/MPILIBS&gt; &lt;RUNDIR&gt;/cesm/cesm1_2_0/$CASE/run&lt;/RUNDIR&gt; //自己定的 &lt;EXEROOT&gt;/cesm/cesm1_2_0/$CASE/bld&lt;/EXEROOT&gt; &lt;DIN_LOC_ROOT&gt;/cesm/cesm1_2_0/inputdata&lt;/DIN_LOC_ROOT&gt; //文件夹事先要创建 &lt;DIN_LOC_ROOT_CLMFORC&gt;/cesm/cesm1_2_0/lmwg&lt;/DIN_LOC_ROOT_CLMFORC&gt; &lt;DOUT_S_ROOT&gt;/cesm/cesm1_2_0/archive/$CASE&lt;/DOUT_S_ROOT&gt; &lt;DOUT_L_MSROOT&gt;/cesm/cesm1_2_0/$CASE&lt;/DOUT_L_MSROOT&gt; &lt;CCSM_BASELINE&gt;/cesm/cesm1_2_0/ccsm_baselines&lt;/CCSM_BASELINE&gt; &lt;CCSM_CPRNC&gt;/cesm/cesm1_2_0/tools/cprnc&lt;/CCSM_CPRNC&gt; &lt;SUPPORTED_BY&gt;srinathv -at- ucar.edu&lt;/SUPPORTED_BY&gt; &lt;GMAKE_J&gt;2&lt;/GMAKE_J&gt; //建议填1或2 &lt;MAX_TASKS_PER_NODE&gt;8&lt;/MAX_TASKS_PER_NODE&gt; &lt;PES_PER_NODE&gt;16&lt;/PES_PER_NODE&gt;&lt;/machine&gt; 然后打开config_compiler.xml打开在后面添加12345&lt;compiler MACH=&quot;newmach&quot;&gt; &lt;NETCDF_PATH&gt;/home/ed/local&lt;/NETCDF_PATH&gt; &lt;ADD_SLIBS&gt;-L/home/ed/local/lib -lnetcdf -lnetcdff&lt;/ADD_SLIBS&gt; &lt;MPI_PATH&gt;/home/ed/local/mpich&lt;/MPI_PATH&gt;&lt;/compiler&gt; 然后执行cp env_mach_specific.userdefined env_mach_specific.newmach,在后面添加123456set NETCDF_PATH = /home/ed/localset MPI_PATH = /home/ed/local/mpichsetenv INC_NETCDF $&#123;NETCDF_PATH&#125;/includesetenv LIB_NETCDF $&#123;NETCDF_PATH&#125;/libsetenv INC_MPI $&#123;MPI_PATH&#125;/includesetenv LIB_MPI $&#123;MPI_PATH&#125;/lib 然后执行cp mkbatch.userdefined mkbatch.newmach,修改按照自己机器的情况,将两句含有mpi执行命令（mpiexec和mpirun）的其中一句解除注释，就可以了 运行CESM先到models/utils/pio下1./configure 然后cd到models/utils/mct下1./configure CC=pgcc FC=pgf90 注：如果出现C编译器的相关问题，就重装PGI 到scripts目录1./create_newcase -case /cesm/cesm1_2_0/case -mach newmach -compset X -res f19_g16 然后进入case那个目录1234./cesm_setup./case.clean_build (svn :用户名：guestuser 密码：friendly)./case.build./case.run 当时摸索用了1个月的时间，希望之后的同学可以少走些弯路。","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]},{"title":"MacOS + selenium + python 极速搭建","date":"2017-03-15T02:58:23.000Z","path":"2017/03/15/MacOS-selenium-python极速搭建/","text":"大四实习临离职的时候做过一周的自动化测试，用的是公司电脑里的Eclipse，导了几个jar包，用java写的一套自动化测试，比较入门，但是实现测试用例还是足够了的，如今为了小公主的面试，我决定试试MacOS的水。 不得不说，MacOS是真方便啊。 环境搭建MacOS自带了python2.7，默认安装目录是/usr/bin/python, 还需要一个文本编辑器，用sublime即可，美观高亮 安装selenium1sudo easy_install selenium 以Firefox为例，安装geckodriver驱动下载解压之后，移动到/usr/local/bin中1sudo mv ~/Downloads/geckodriver /usr/local/bin/ 如果出现了以下的问题，就是没有安装geckodriver selenium.common.exceptions.WebDriverException: Message: ‘geckodriver’ executable needs to be in PATH. 简单的自动化测试脚本打开sublime，键入几句简单的测试代码123456789from selenium import webdriverfrom selenium.common.exceptions import NoSuchElementExceptionfrom selenium.webdriver.common.keys import Keysimport timebrowser = webdriver.Firefox() browser.get(&quot;http://www.baidu.com&quot;) assert &quot;Hahaha&quot; in browser.titlebrowser.close() 保存成test.py，然后在命令行中运行1python test.py 如果出现了如下的错误 selenium.common.exceptions.WebDriverException: Message: Missing ‘marionetteProtocol’ field in handshake 说明Firefox的版本太老了，更新之后再运行，发现百度的页面打开，这个简单脚本就运行成功了。 有时间的时候再探究一下Chrome。","tags":[{"name":"技术","slug":"技术","permalink":"http://yoursite.com/tags/技术/"}]},{"title":"第一篇个人博客的诞生","date":"2017-03-14T15:42:45.000Z","path":"2017/03/14/第一篇个人博客的诞生/","text":"大学四年转瞬而过，始终都没有时间好好地写一篇博客，在回顾过去的历程之前，记录一下这篇博客诞生的始末。 这篇博客使用了简洁轻便的Hexo平台和github的免费挂载，可能在未来某个打算花费大量精力打造博客的时刻购买一个个性化的域名。 第一篇个人博客的诞生，是一个值得纪念的时间节点，代表我终于从长时间的焦虑中逐渐缓解，学会如何分享和思考。 首先提到github，大三和大四实习期间使用github协作的时候很多，但几乎全是未曾公开的实习代码，随着离职也都被移出了协作。这两年间也几乎没写过为了兴趣为了欣赏的作品，目的性很强，但技术却没得到长足的进步。 想做很多当下比较流行的事，个人博客是其中一件。 安装环境装Nodejs是必要的，之前实习有用到，创建一个放置个人博客的文件夹，cd到文件夹下，使用如下命令安装Hexo1sudo npm install -g hexo 然后对Hexo进行初始化操作1hexo init 生成静态页面1hexo generate 启动预览1hexo server 打开http://localhost:4000就看到了Hexo的欢迎页 关联Github之前发现github.io可以挂载自定义的html页面，也有过自己编写博客模版的打算，先作为一个小目标去努力。 首先创建一个Repository，以我的个人博客为例，Repository的名字就是lolilukia.github.io 然后cd到个人博客的文件夹下，编辑_config.yml文件1vim _config.yml 按i进行插入修改操作，修改以下内容：1234567deploy: type: git repo: https://github.com/lolilukia/lolilukia.github.io.git branch: master 然后按esc退出编辑模式，连按两次大写Z保存并退出，退出后继续执行命令1npm install hexo-deployer-git --save 部署1hexo deploy 打开http://lolilukia.github.io，就可以看到Hexo的欢迎页了 使用主题这个个人博客的主题来自Litten，说实话它的设计给了我会心一击，我在寒假的时候曾经想要写一个个人博客模板，虽说细节并不相同，但侧边栏的设计惊人地相似，不得不说这个主题很有科技感，敬佩和羡慕之情油然而生。 首先将这个主题拷贝到本地，也就是个人博客目录下的主题文件夹中1git clone https://github.com/litten/hexo-theme-yilia.git /Users/apple/blog/themes/yilia 修改blog下的_config.yml1vim _config.yml 将themes后的默认landscope改为yilia 最后一步就是cd到yilia文件夹下更改配置1vim _config.yml 更改作者、友链等相关栏目，重新启动服务，就可以看到主题了。 编写博客博客的原理是将markdown文档放到source/_posts文件夹下，然后生成静态页面。 首先新建一个文章1hexo new &quot;第一篇个人博客的诞生&quot; 在source/_posts中会生成一个md文件，用编辑器打开进行编辑，然后执行如下的操作1234hexo cleanhexo generatehexo deployhexo server 打开http://localhost:4000就能看到新写的博文啦～","tags":[{"name":"博客","slug":"博客","permalink":"http://yoursite.com/tags/博客/"}]}]